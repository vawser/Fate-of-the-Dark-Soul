-------------------------------
-- Mod: Global Variables
-------------------------------

------------------------------------------
-- Mod: Functions
------------------------------------------

------------------------------------------
-- Core: Functions
------------------------------------------
function IncNum(num)
    local str = nil
    if num < 10 then
        str = "Debug0"
    else
        str = "Debug"
    end
    local vec = GetVariable(str .. num)
    vec[0] = vec[0] + 1
    vec[1] = g_FrameCount
    SetVariable(str .. num, vec)
end

function DebugPrint(pos, val)
    local str = nil
    if pos < 10 then
        str = "Debug0"
    else
        str = "Debug"
    end
    vector = GetVariable(str .. pos)
    vector[0] = val
    vector[1] = g_FrameCount
    SetVariable(str .. pos, vector)
end

function Fire(event)
    hkbFireEvent(event)
end

function IsExistAnime(id)
    return env(DoesAnimExist, id)
end

function Replanning()
    act("キャンセルタイミングでAIへのリプランニング要求")
end

function SetVariable(name, val)
    hkbSetVariable(name, val)
end

function GetVariable(name)
    return hkbGetVariable(name)
end

function SetIdleType(idle_type)
    if idle_type == AI_STATE_DEFAULT then
        if IsExistAnime(ANIME_ID_IDLE_DEFAULT) == TRUE then
            SetVariable("IndexAiState", AI_STATE_DEFAULT)
        else
            SetVariable("IndexAiState", AI_STATE_BATTLE)
        end
    else
        SetVariable("IndexAiState", AI_STATE_BATTLE)
    end
    return
end

function CallActionState(action_type)
    act(SetAIAttackState, action_type)
end

function ExecTurn(is_on_cancel)
    if is_on_cancel == TRUE and env(IsMoveCancelPossible) == FALSE then
        return FALSE
    end
    local turn_angle = GetVariable("TurnAngle")
    if math.abs(turn_angle) <= 0 then
        return FALSE
    end
    local is_emergency_turn = env(IsEmergencyQuickTurnActivated)
    if math.abs(turn_angle) < 45 and is_emergency_turn == FALSE then
        return FALSE
    end
    local dir = INVALID
    local correction_factor = 0
    if math.abs(turn_angle) < 67.5 then
        if turn_angle < 0 then
            if TRUE == env(GetSpEffectID, SP_EFFECT_IGNORE_TURN45) then
                dir = INDEX_TURN_DIRECTION_LEFT90
                correction_factor = 90
            else
                dir = INDEX_TURN_DIRECTION_LEFT45
                correction_factor = 45
            end
        elseif TRUE == env(GetSpEffectID, SP_EFFECT_IGNORE_TURN45) then
            dir = INDEX_TURN_DIRECTION_RIGHT90
            correction_factor = 90
        else
            dir = INDEX_TURN_DIRECTION_RIGHT45
            correction_factor = 45
        end
    elseif math.abs(turn_angle) < 135 then
        if turn_angle < 0 then
            dir = INDEX_TURN_DIRECTION_LEFT90
        else
            dir = INDEX_TURN_DIRECTION_RIGHT90
        end
        correction_factor = 90
    else
        if turn_angle < 0 then
            dir = INDEX_TURN_DIRECTION_LEFT180
        else
            dir = INDEX_TURN_DIRECTION_RIGHT180
        end
        correction_factor = 180
    end
    local buff = {}
    local ai_rec = env(GetAITargetAwareState)
    local action_type = env(GetAIActionType)
    if action_type == ACTION_TYPE_GUARD then
        buff[1] = INDEX_TURN_GUARD
        buff[2] = INDEX_TURN_BATTLE
        buff[3] = INDEX_TURN_DEFAULT
    elseif action_type == ACTION_TYPE_PARRY then
        buff[1] = INDEX_TURN_PARRY
        buff[2] = INDEX_TURN_BATTLE
        buff[3] = INDEX_TURN_DEFAULT
    elseif ai_rec > AI_RECOGNITION_NONE then
        buff[1] = INDEX_TURN_BATTLE
        buff[2] = INDEX_TURN_DEFAULT
        buff[3] = INDEX_TURN_GUARD
    else
        buff[1] = INDEX_TURN_DEFAULT
        buff[2] = INDEX_TURN_BATTLE
        buff[3] = INDEX_TURN_GUARD
    end
	local turn_index = INVALID
    for i = 1, #buff, 1 do
        local anim = ANIME_ID_TURN + buff[i] * 10 + dir
        if IsExistAnime(anim) == TRUE then
            turn_index = buff[i]
            break
        elseif dir == INDEX_TURN_DIRECTION_LEFT45 then
            anim = ANIME_ID_TURN + buff[i] * 10 + INDEX_TURN_DIRECTION_LEFT90
            if IsExistAnime(anim) == TRUE then
                turn_index = buff[i]
                dir = INDEX_TURN_DIRECTION_LEFT90
                correction_factor = 90
                break
            end
        elseif dir == INDEX_TURN_DIRECTION_RIGHT45 then
            anim = ANIME_ID_TURN + buff[i] * 10 + INDEX_TURN_DIRECTION_RIGHT90
            if IsExistAnime(anim) == TRUE then
                turn_index = buff[i]
                dir = INDEX_TURN_DIRECTION_RIGHT90
                correction_factor = 90
                break
            end
        end
    end
    if turn_index >= 0 then
        act(SetTurnAnimCorrectionRate, correction_factor)
        act(SetIsTurnAnimInProgress)
        local event = "W_Turn"
        local ai_state = AI_STATE_BATTLE
        if turn_index == INDEX_TURN_BATTLE then
            event = event .. "Battle"
        else
            if turn_index == INDEX_TURN_GUARD then
                event = event .. "Guard"
            else
                if turn_index == INDEX_TURN_PARRY then
                    event = event .. "Parry"
                else
                    event = event .. "Default"
                    ai_state = AI_STATE_DEFAULT
                end
            end
        end
        SetIdleType(ai_state)
        if dir == INDEX_TURN_DIRECTION_LEFT90 then
            event = event .. "_Left90"
        else
            if dir == INDEX_TURN_DIRECTION_RIGHT90 then
                event = event .. "_Right90"
            else
                if dir == INDEX_TURN_DIRECTION_LEFT180 then
                    event = event .. "_Left180"
                else
                    if dir == INDEX_TURN_DIRECTION_RIGHT180 then
                        event = event .. "_Right180"
                    else
                        if dir == INDEX_TURN_DIRECTION_LEFT45 then
                            event = event .. "_Left45"
                        else
                            if dir == INDEX_TURN_DIRECTION_RIGHT45 then
                                event = event .. "_Right45"
                            end
                        end
                    end
                end
            end
        end
        Fire(event)
        return TRUE
    end
    return FALSE
end

function ExecAIAction(style)
    local action_type = env(GetAIActionType)
    if action_type <= 0 then
        if style == STYLE_DEFAULT then
            return FALSE
        else
            if style == STYLE_GUARD then
                Fire("W_GuardEnd")
            elseif style == STYLE_PARRY then
                Fire("W_ParryEnd")
            end
            return TRUE
        end
    end
    if ExecArtEnd(action_type) == TRUE then
        return TRUE
    end
    if ExecAIStep(action_type) == TRUE then
        return TRUE
    end
    if ExecAIAttack(action_type) == TRUE then
        return TRUE
    end
    if ExecAIGuard(action_type, style) == TRUE then
        return TRUE
    end
    if ExecAIParry(action_type, style) == TRUE then
        return TRUE
    end
    return FALSE
end

function ExecAICancelAction(style)
    local action_type_atk = INVALID
    local action_type = INVALID
    local action_type_combo = env(GetAIChainActionType)
    local action_type_cancel = env(GetAIAtkCancelType)
    local action_type_step = env(GetAIChainStepType)
    local action_type_endure = env(GetAIDefenseCancelType)
    local action_type_find_stab = env(GetAIVersusBackstabCancelType)
    if action_type_combo > 0 then
        action_type_atk = action_type_combo
        action_type = action_type_combo
    elseif action_type_cancel > 0 then
        action_type_atk = action_type_cancel
        action_type = action_type_cancel
    elseif action_type_step > 0 then
        action_type = action_type_step
    elseif action_type_endure > 0 then
        action_type = action_type_endure
        action_type_atk = action_type_endure
    elseif action_type_find_stab > 0 then
        action_type = action_type_find_stab
        action_type_atk = action_type_find_stab
    else
        return FALSE
    end
    if ExecArtEnd(action_type) == TRUE then
        return TRUE
    end
    if ExecAIStep(action_type_step) == TRUE then
        return TRUE
    end
    if ExecAIAttack(action_type_atk) == TRUE then
        return TRUE
    end
    if ExecAIGuard(action_type_atk, style) == TRUE then
        return TRUE
    end
    if ExecAIParry(action_type_atk, style) == TRUE then
        return TRUE
    end
    return FALSE
end

function ExecArtEnd(action_type)
    if env(GetSpEffectID, SP_EFFECT_ART_STANCE) == FALSE then
        return FALSE
    end
    if action_type == ACTION_TYPE_PARRY then
        return FALSE
    end
    if action_type >= ANIME_ID_ART_STANCE_BEGIN and action_type <= ANIME_ID_ART_STANCE_END then
        return FALSE
    end
    Fire("W_ParryEnd")
    return TRUE
end

function ExecAIGuard(action_type, style)
    if action_type ~= ACTION_TYPE_GUARD then
        return FALSE
    end
    if style == STYLE_GUARD then
        return FALSE
    elseif style == STYLE_PARRY then
        Fire("W_ParryEnd")
        return TRUE
    end
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        local i = GetMoveDir(move_speed_level)
        local anim_id = move_table_guard[i][1]
        if IsExistAnime(anim_id) == FALSE then
            return FALSE
        end
    end
    Fire("W_GuardStart")
    return TRUE
end

function ExecAIParry(action_type, style)
    if action_type ~= ACTION_TYPE_PARRY then
        return FALSE
    end
    if style == STYLE_PARRY then
        return FALSE
    elseif style == STYLE_GUARD then
        Fire("W_GuardEnd")
        return TRUE
    end
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        local i = GetMoveDir(move_speed_level)
        local anim_id = move_table_parry[i][1]
        if IsExistAnime(anim_id) == FALSE then
            return FALSE
        end
    end
    Fire("W_ParryStart")
    return TRUE
end

function ExecAIAttack(action_type)
    if action_type == ANIME_ID_HEATUP then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type == ANIME_ID_MODE_CHANGE then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type == ANIME_ID_LOSE_TARGET then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_ATTACK_BEGIN and action_type <= ANIME_ID_ATTACK_END then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_ART_STANCE_BEGIN and action_type <= ANIME_ID_ART_STANCE_END then
        if env(GetSpEffectID, SP_EFFECT_ART_STANCE) == FALSE then
            Fire("W_ParryStart")
            return TRUE
        else
            ExecAttack(action_type)
            return TRUE
        end
    end
    if action_type == ANIME_ID_PARRY_ATTACK then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type == ANIME_ID_BRING_EST then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_EVENT_BEGIN and action_type <= ANIME_ID_EVENT_END then
        ExecEventAction(action_type)
        return TRUE
    end
    return FALSE
end

function ExecAIStep(action_type)
    if ANIME_ID_STEP_BEGIN <= action_type and action_type <= ANIME_ID_STEP_END then
        ExecStep(action_type)
        return TRUE
    end
    return FALSE
end

function ExecAttack(action_number)
    Fire("W_Attack" .. action_number)
    CallActionState(action_number)
end

function ExecEventAction(action_number)
    Fire("W_Event" .. action_number)
    CallActionState(action_number)
end

function ExecStep(action_number)
    Fire("W_Step" .. action_number)
    CallActionState(action_number)
end

function ExecLand(fall_type)
    if env(IsLanding) == FALSE then
        if env(GetReceivedDamageType) == DAMAGE_TYPE_DEATH and env(HasReceivedAnyDamage) == FALSE then
            Fire("W_DeathStartDefault")
            return TRUE
        end
        local height = env(GetFallHeight) / 100
        if height > HEIGHT_FORCE_DEATH and env(GetStateChangeType, SP_EFFECT_TYPE_FALL_DEATH_INVALID) == FALSE then
            Fire("W_DeathStartDefault")
            return TRUE
        end
        return FALSE
    end
    if TRUE == IsDead() then
        if fall_type == FALL_UPWARD then
            anim_id = ANIME_ID_DEATH_LAND_UPWARD
            event = "W_DeathStartLandUpward"
        elseif fall_type == FALL_DOWNWARD then
            anim_id = ANIME_ID_DEATH_LAND_DOWNWARD
            event = "W_DeathStartLandDownward"
            if FALSE == IsExistAnime(anim_id) then
                anim_id = ANIME_ID_DEATH_LAND_DEFAULT
                event = "W_DeathStartLandDefault"
            end
        elseif fall_type == FALL_LADDER then
            anim_id = ANIME_ID_DEATH_START_LADDER
            event = "W_DeathStartLadder"
        else
            anim_id = ANIME_ID_DEATH_LAND_DEFAULT
            event = "W_DeathStartLandDefault"
            if FALSE == IsExistAnime(anim_id) then
                anim_id = ANIME_ID_DEATH_LAND_DOWNWARD
                event = "W_DeathStartLandDownward"
            end
        end
        if FALSE == IsExistAnime(anim_id) then
            local index = GetRandomIndex(ANIME_ID_DEATH_VARIATION, 0, 1, 10)
            SetVariable("IndexDeathVariation", index)
            event = "W_DeathStartDefault"
        end
        if env(GetSpEffectID, SP_EFFECT_SANDWORM_DEAD) == TRUE then
            event = "W_Event20000"
        elseif env(GetSpEffectID, SP_EFFECT_CURSED_TREE_DEAD) == TRUE then
            event = "W_Event20001"
        elseif env(GetSpEffectID, SP_EFFECT_PILGRIM_UNDEAD_DEAD) == TRUE then
            event = "W_Event20010"
        elseif env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN) == TRUE then
            if env(GetRandomInt, 0, 1) > 0 then
                event = "W_Event20002"
            else
                event = "W_Event20003"
            end
        end
        Fire(event)
        return TRUE
    end
    if env(CheckForEventAnimPlaybackRequest) == TRUE then
        return TRUE
    end
    if env(GetSpEffectID, SP_EFFECT_CURSED_TREE_LAND) == TRUE then
        Replanning()
        Fire("W_Event20000")
        return TRUE
    end
    if fall_type == FALL_LADDER then
        Replanning()
        Fire("W_LadderFallLand")
        return TRUE
    elseif fall_type == FALL_DEFAULT then
        local height = env(GetFallHeight) / 100
        if height > HEIGHT_TRANS_TO_HEAVY_LAND then
            if TRUE == IsExistAnime(ANIME_ID_LAND_HEAVY) then
                Fire("W_LandHeavy")
            else
                Fire("W_LandDefault")
            end
            Replanning()
            return TRUE
        elseif height > HEIGHT_TRANS_TO_LAND then
            Replanning()
            Fire("W_LandDefault")
            return TRUE
        else
            act(AIReplanRequest)
            Fire("W_Idle")
            return TRUE
        end
    elseif fall_type == FALL_UPWARD then
        Replanning()
        Fire("W_LandUpward")
        return TRUE
    elseif fall_type == FALL_DOWNWARD then
        Replanning()
        Fire("W_LandDownward")
        return TRUE
    else
        Fire("W_LandDefault")
        return TRUE
    end
    return FALSE
end

function ExecFallStart(is_damage_state)
    if env(IsFalling) == FALSE then
        return FALSE
    end
    if is_damage_state == TRUE then
        local damage_direction = env(GetReceivedDamageDirection)
        if damage_direction >= DIRECTION_LEFT and damage_direction <= DIRECTION_FORWARD then
            if TRUE == IsExistAnime(ANIME_ID_FALLING_UPWARD) then
                Fire("W_FallingUpward")
                return TRUE
            end
        elseif damage_direction == DIRECTION_BACK and TRUE == IsExistAnime(ANIME_ID_FALLING_DOWNWARD) then
            Fire("W_FallingDownward")
            return TRUE
        end
    end
    Fire("W_FallingDefault")
    return TRUE
end

function ExecAIStateChange()
    local cur_ai_state = env(GetAITargetAwareState)
    if cur_ai_state > AI_RECOGNITION_NONE then
        cur_ai_state = AI_STATE_BATTLE
    elseif IsExistAnime(ANIME_ID_IDLE_DEFAULT) == TRUE then
        cur_ai_state = AI_STATE_DEFAULT
    else
        cur_ai_state = AI_STATE_BATTLE
    end
    if cur_ai_state == GetVariable("IndexAiState") then
        return FALSE
    end
    SetIdleType(cur_ai_state)
    if cur_ai_state == AI_STATE_DEFAULT then
        if IsExistAnime(ANIME_ID_TRANS_BATTLE_DEFAULT) == TRUE then
            Fire("W_TransToDefaultFromBattle")
            return TRUE
        end
    elseif IsExistAnime(ANIME_ID_TRANS_DEFAULT_BATTLE) == TRUE then
        Fire("W_TransToBattleFromDefault")
        return TRUE
    end
    return FALSE

end

function IsDead()
    local hp = env(GetHP)
    if (env(GetReceivedDamageType) == DAMAGE_TYPE_DEATH or hp <= 0) and env(GetSpEffectID, SP_EFFECT_IGNORE_DEAD) == FALSE then
        return TRUE
    end
    if hp <= 1 then
        if env(GetSpEffectID, SP_EFFECT_SKELETON_NO_DEAD) == TRUE then
            return TRUE
        end
        if env(GetSpEffectID, SP_EFFECT_SKELETON_NO_DEAD + 2) == TRUE then
            return TRUE
        end
        if env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN) == TRUE then
            return TRUE
        end
    end
    if env(GetSpEffectID, SP_EFFECT_DLC2_NINGENSEINOMUSHI_SEITAI_DEAD) == TRUE and env(GetSpEffectID, SP_EFFECT_DLC2_NINGENSEINOMUSHI_SEITAI_UNABLEDEAD) == FALSE then
        return TRUE
    end
    if hp <= 1 and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_UNABLE_DEAD) == FALSE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU_DONE) == FALSE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT) == TRUE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_DEAD) == TRUE then
        return TRUE
    end
    return FALSE
end

function ExecDeath()
    if IsDead() == FALSE then
        return FALSE
    end
    local death_type = GetDeathType()
    local anim_id = -1
    local event = "W_DeathStartDefault"
    if death_type == DEATH_TYPE_WEAK then
        anim_id = ANIME_ID_DEATH_WEAK
        event = "W_DeathStartWeak"
    elseif death_type == DEATH_TYPE_BLAST then
        anim_id = ANIME_ID_DEATH_BLAST
        event = "W_DeathStartBlast"
    elseif death_type == DEATH_TYPE_FIRE then
        anim_id = ANIME_ID_DEATH_FIRE
        event = "W_DeathStartFire"
    elseif death_type == DEATH_TYPE_UPPER then
        anim_id = ANIME_ID_DEATH_UPPER
        event = "W_DeathStartUpper"
    elseif death_type == DEATH_TYPE_FLING then
        anim_id = ANIME_ID_DEATH_FLING
        event = "W_DeathStartFling"
    end
    if anim_id >= 0 and IsExistAnime(anim_id) == FALSE then
        event = "W_DeathStartDefault"
        death_type = DEATH_TYPE_DEFAULT
    end
    if death_type == DEATH_TYPE_DEFAULT then
        if env(GetSpEffectID, SP_EFFECT_UNDEAD) == TRUE then
            local rand = env(GetRandomInt, 0, 2)
            if rand == 0 then
                event = "W_Event20012"
            elseif rand == 1 then
                event = "W_Event20013"
            else
                event = "W_Event20014"
            end
        else
            local index = GetRandomIndex(ANIME_ID_DEATH_VARIATION, 0, 1, 10)
            SetVariable("IndexDeathVariation", index)
        end
    elseif death_type == DEATH_TYPE_FIRE then
        local index = GetRandomIndex(ANIME_ID_DEATH_FIRE, 1, 1, 10)
        SetVariable("IndexDeathVariation", index)
    end
    if env(GetSpEffectID, SP_EFFECT_BLAST_SPIN_ON_DEATH) == TRUE then
        act(BlowDamageTurn)
    end
    if env(GetSpEffectID, SP_EFFECT_SANDWORM_DEAD) == TRUE then
        event = "W_Event20000"
    elseif env(GetSpEffectID, SP_EFFECT_CURSED_TREE_DEAD) == TRUE then
        event = "W_Event20001"
    elseif env(GetSpEffectID, SP_EFFECT_PILGRIM_UNDEAD_DEAD) == TRUE then
        event = "W_Event20010"
    elseif env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN) == TRUE then
        if 0 < env(GetRandomInt, 0, 1) then
            event = "W_Event20002"
        else
            event = "W_Event20003"
        end
    elseif env(GetSpEffectID, SP_EFFECT_DLC_HAE_TATAKI) == TRUE then
        act(BlowDamageTurn)
        event = "W_Event20000"
    elseif env(GetSpEffectID, SP_EFFECT_DLC_TALK_ZOMBIKARASU) == TRUE then
        event = "W_Event20000"
    elseif env(GetSpEffectID, SP_EFFECT_DLC_TALK_KARASUMURABITO) == TRUE then
        event = "W_Event20002"
    elseif env(GetSpEffectID, SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA_AOMUKEDEAD) == TRUE then
        event = "W_Event20005"
    elseif env(GetSpEffectID, SP_EFFECT_DLC2_NINGENSEINOMUSHI_SEITAI_DEAD) == TRUE then
        event = "W_Event20001"
    elseif env(GetSpEffectID, SP_EFFECT_DLC2_BLACKKNIGHT) == TRUE then
        event = "W_Event20000"
    elseif env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU) == TRUE and FALSE == env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU_DONE) then
        if env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_BEAM) == TRUE then
            event = "W_Event20002"
        else
            event = "W_Event20003"
        end
    elseif env(GetSpEffectID, SP_EFFECT_ABADON_TALKNPC) == TRUE then
        event = "W_DeathStartDefault"
    end
    Fire(event)
    return TRUE
end

function ExecTransToDeathIdle(death_type)
    if env(GetHP) > 0 then
        if env(GetSpEffectID, SP_EFFECT_SKELETON_TMP_DEATH) == TRUE or env(GetSpEffectID, SP_EFFECT_SKELETON_TMP_DEATH + 2) == TRUE then
            if env(GetStateChangeType, SP_EFFECT_TYPE_HOLY) == FALSE and env(IsVersusDivineDamage) == FALSE then
                Fire("W_Event30000")
                return TRUE
            end
        elseif env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN) == TRUE then
            if env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN + 1) == TRUE then
                Fire("W_Event30000")
                return TRUE
            elseif env(GetSpEffectID, SP_EFFECT_ZOMBIE_GUARDIAN + 2) == TRUE then
                Fire("W_Event30001")
                return TRUE
            end
        end
    end
    if env(IsAnimEnd, 1) == FALSE then
        return FALSE
    end
    local event = "W_DeathIdleDefault"
    local anim_id = -1
    local index = -1
    if death_type == DEATH_TYPE_FIRE then
        index = GetVariable("IndexDeathVariation")
        anim_id = ANIME_ID_DEATH_FIRE + index * 10 + 1
        event = "W_DeathIdleFire"
    elseif death_type == DEATH_TYPE_WEAK then
        anim_id = ANIME_ID_DEATH_WEAK + 1
        event = "W_DeathIdleWeak"
    elseif death_type == DEATH_TYPE_BLAST then
        anim_id = ANIME_ID_DEATH_BLAST + 1
        event = "W_DeathIdleBlast"
    elseif death_type == DEATH_TYPE_FLING then
        anim_id = ANIME_ID_DEATH_FLING + 1
        event = "W_DeathIdleFling"
    elseif death_type == DEATH_TYPE_UPPER then
        anim_id = ANIME_ID_DEATH_UPPER + 1
        event = "W_DeathIdleUpper"
    elseif death_type == DEATH_TYPE_LAND_DEFAULT then
        anim_id = ANIME_ID_DEATH_LAND_DEFAULT + 1
        event = "W_DeathIdleLandDefault"
    elseif death_type == DEATH_TYPE_LAND_UPWARD then
        anim_id = ANIME_ID_DEATH_LAND_UPWARD + 1
        event = "W_DeathIdleLandUpward"
    elseif death_type == DEATH_TYPE_LAND_DOWNWARD then
        anim_id = ANIME_ID_DEATH_LAND_DOWNWARD + 1
        event = "W_DeathIdleLandDownward"
    elseif death_type == DEATH_TYPE_LADDER then
        anim_id = ANIME_ID_DEATH_START_LADDER + 1
        event = "W_DeathIdleLadder"
    elseif death_type == DEATH_TYPE_THROW_DEF then
        local throw_id = GetVariable("ThrowID")
        anim_id = ANIME_ID_DEATH_THROW_PARRY + 1
        if throw_id == ANIME_ID_THROW_DEF_BACKSTAB then
            anim_id = ANIME_ID_DEATH_THROW_BACKSTAB + 1
        end
        event = "W_ThrowDefDeathIdle"
    elseif death_type == DEATH_TYPE_DEFAULT then
        index = GetVariable("IndexDeathVariation")
        if index > 0 then
            anim_id = ANIME_ID_DEATH_VARIATION + 10 * (index - 1) + 1
        end
    end
    if anim_id >= 0 then
        if IsExistAnime(anim_id) == FALSE then
            event = "W_DeathIdleDefault"
            SetVariable("IndexDeathIdleVariation", 0)
        elseif index >= 0 then
            SetVariable("IndexDeathIdleVariation", index)
        end
    end
    if env(GetSpEffectID, SP_EFFECT_POOR_UNDEAD_DEAD) == TRUE then
        event = "W_Event20000"
    end
    Fire(event)
    return TRUE
end

function IsSpDamageAllowed()
    for i = 0, 2, 1 do
        if env(GetSpEffectID, SP_EFFECT_IGNORE_SPECIAL_DAMAGE + i) == TRUE then
            return FALSE
        end
    end
    return TRUE
end

function IsSpDamage(pre_sp_damage)
    if pre_sp_damage == SP_DAMAGE_ITEM_PARRY then
        return TRUE
    end
    local damage_elem = env(GetSpecialAttribute)
    if damage_elem == DAMAGE_ELEMENT_FIRE and (TRUE == env(GetSpEffectID, SP_EFFECT_MAGGOT_MAN) or TRUE == env(GetSpEffectID, SP_EFFECT_CRUCIFY_UNDEAD_A) or TRUE == env(GetSpEffectID, SP_EFFECT_CRUCIFY_UNDEAD_B) or TRUE == env(GetSpEffectID, SP_EFFECT_UNDEAD_DOG) or TRUE == env(GetSpEffectID, SP_EFFECT_GUNDA_UNDEAD) or TRUE == env(GetSpEffectID, SP_EFFECT_ARISE_3) or TRUE == env(GetSpEffectID, SP_EFFECT_ARISE) or TRUE == env(GetSpEffectID, SP_EFFECT_DLC_WolfM) or TRUE == env(GetSpEffectID, SP_EFFECT_DLC_WolfS) or TRUE == env(GetSpEffectID, SP_EFFECT_DLC_SnowLady) or TRUE == env(GetSpEffectID, SP_EFFECT_DLC_KARASU_MURABITO)) then
        return TRUE
    end
    local damage_part = env(GetPartGroup)
    if damage_part == 1 then
        if TRUE == env(GetSpEffectID, SP_EFFECT_COBRA_ASSASSIN) or TRUE == env(GetSpEffectID, SP_EFFECT_SANDWORM) or TRUE == env(GetSpEffectID, SP_EFFECT_MOTHER_DORAGON) then
            return TRUE
        elseif TRUE == env(GetSpEffectID, SP_EFFECT_FULL_ARMOR_BEAST) then
            local damage_level = env(GetDamageLevel)
            if damage_level >= DAMAGE_LEVEL_MIDDLE and damage_level ~= DAMAGE_LEVEL_PUSH and damage_level ~= DAMAGE_LEVEL_MINIMUM then
                return TRUE
            end
        end
    elseif damage_part == 7 then
        if TRUE == env(GetSpEffectID, SP_EFFECT_TINDALOS_SP_DAMAGE) then
            return TRUE
        end
        if TRUE == env(GetSpEffectID, SP_EFFECT_HUNGRY_JACK) then
            return TRUE
        end
    end
    return FALSE
end

function ExecSpDamage(pre_sp_damage)
    if IsSpDamage(pre_sp_damage) == TRUE and TRUE == IsSpDamageAllowed() then
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        local index = GetRandomIndex(ANIME_ID_SPECIAL_DAMAGE_RANDOM, 1, 2, 1)
        SetVariable("IndexDamageRandom", index)
        Fire("W_DamageSpecial")
        return TRUE
    end
    if pre_sp_damage == SP_DAMAGE_FAT_BREAK and TRUE == IsSpDamageAllowed() then
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        local dir = env(GetReceivedDamageDirection)
        local event = "W_Event20000"
        if dir == DIRECTION_BACK then
            event = "W_Event20001"
        elseif dir == DIRECTION_LEFT then
            event = "W_Event20002"
        elseif dir == DIRECTION_RIGHT then
            event = "W_Event20003"
        end
        Fire(event)
        return TRUE
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_ROCK_LIZARD) and TRUE == env(GetBehaviorID, BEH_IDENTIFIER_KICK) and TRUE == IsSpDamageAllowed() then
        act(BlowDamageTurn)
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        Fire("W_Event20000")
        return TRUE
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_GARGOYLE_AT_CASTLE) and TRUE == IsSpDamageAllowed() then
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        Fire("W_Event20010")
        return TRUE
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_SKELETON_KNIGHT) and 2 == env(GetPhysicalAttribute) then
        local damage_level = env(GetDamageLevel)
        if (damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE or damage_level == DAMAGE_LEVEL_SMALL_BLOW or damage_level == DAMAGE_LEVEL_LARGE_BLOW) and TRUE == IsSpDamageAllowed() then
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            local dir = env(GetReceivedDamageDirection)
            local event = "W_Event20010"
            if dir == DIRECTION_BACK then
                event = "W_Event20011"
            elseif dir == DIRECTION_LEFT then
                event = "W_Event20012"
            elseif dir == DIRECTION_RIGHT then
                event = "W_Event20013"
            end
            Fire(event)
            return TRUE
        end
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_DLC_HAE_TATAKI) then
        local damage_level = env(GetDamageLevel)
        if damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_FLING and TRUE == IsSpDamageAllowed() then
            act(BlowDamageTurn)
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Fire("W_DamageSpecial")
            return TRUE
        end
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_DLC_KARASUKISI_COUNTER_R) then
        local damage_level = env(GetDamageLevel)
        local damage_type = env(GetReceivedDamageType)
        local is_kick = env(GetBehaviorID, BEH_IDENTIFIER_KICK)
        if damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_MINIMUM and is_kick == FALSE and damage_type ~= DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and damage_type ~= DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 and TRUE == IsSpDamageAllowed() then
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Fire("W_Event20002")
            return TRUE
        end
    end
    if TRUE == env(GetSpEffectID, SP_EFFECT_DLC_KARASUKISI_COUNTER_L) then
        local damage_level = env(GetDamageLevel)
        local damage_type = env(GetReceivedDamageType)
        local is_kick = env(GetBehaviorID, BEH_IDENTIFIER_KICK)
        if damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_MINIMUM and is_kick == FALSE and damage_type ~= DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and damage_type ~= DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 and TRUE == IsSpDamageAllowed() then
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Fire("W_Event20003")
            return TRUE
        end
    end
    return FALSE
end

function ExecNoSyncAddDamage(damage_level, is_damaged)
    if (damage_level == DAMAGE_LEVEL_NONE or damage_level == DAMAGE_LEVEL_MINIMUM) and is_damaged == TRUE then
        if TRUE == env(IsPartDamageAdditiveBlendInvalid) then
            return TRUE
        end
        if TRUE == env(GetBehaviorID, BEH_IDENTIFIER_MAGMA) then
            return FALSE
        end
        if FALSE == IsExistAnime(ANIME_ID_NO_ADD) then
            return TRUE
        end
        if TRUE == env(GetSpEffectID, SP_EFFECT_VARIANT_YUPA) and TRUE == env(GetSpEffectID, SP_EFFECT_BLUE_LIGHTNING) then
            return FALSE
        end
        local damage_part = env(GetPartGroup)
        if damage_part > 0 then
            local anim_id = 0
            if damage_part > 8 then
                anim_id = ANIME_ID_PART9_DAMAGE + damage_part - 9
            else
                anim_id = ANIME_ID_PART1_DAMAGE + (damage_part - 1) * 10
            end
            if IsExistAnime(anim_id) == TRUE then
                SetVariable("BlendPart" .. damage_part, 1)
                Fire("W_PartBlend_Add" .. damage_part)
                return TRUE
            end
        end
        if TRUE == IsExistAnime(ANIME_ID_ADD_BLEND_FRONT) then
            local damage_direction = env(GetReceivedDamageDirection)
            local offsetanim = GetDamageDirectionOffset(damage_direction)
            local str = "W_SABlend_Add_Front"
            if damage_direction == DIRECTION_FORWARD then

            elseif damage_direction == DIRECTION_LEFT then
                str = "W_SABlend_Add_Left"
            elseif damage_direction == DIRECTION_RIGHT then
                str = "W_SABlend_Add_Right"
            elseif damage_direction == DIRECTION_BACK then
                str = "W_SABlend_Add_Back"
            end
            if IsExistAnime(ANIME_ID_ADD_BLEND_FRONT + offsetanim) == TRUE then
                SetVariable("BlendSA", 1)
                Fire(str)
            else
                SetVariable("BlendSA", 1)
                Fire("W_SABlend_Add_Front")
            end
            return TRUE
        end
        return TRUE
    end
    return FALSE
end

function ExecSaBreakDamage(damage_level)
    if env(HasBrokenSA) == TRUE then
        if env(GetSpEffectID, SP_EFFECT_FULL_ARMOR_BEAST) == TRUE then
            return FALSE
        end
        if env(GetSpEffectID, SP_EFFECT_DLC_WOLFKING) == TRUE then
            return FALSE
        end
        local dir = GetDirOfPlayableDamage(ANIME_ID_SA_BREAK, FALSE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Replanning()
            Fire("W_SABreak")
            return TRUE
        else
            if TRUE == ExecDamageDefault(DAMAGE_LEVEL_LARGE) then
                return TRUE
            end
            if TRUE == ExecDamageDefault(DAMAGE_LEVEL_MIDDLE) then
                return TRUE
            end
            if TRUE == ExecDamageDefault(DAMAGE_LEVEL_SMALL) then
                return TRUE
            end
        end
    end
    return FALSE
end

function ExecGuardBlock(damage_type)
    if damage_type == DAMAGE_TYPE_GUARD then
        local guard_damage = env(GetGuardLevelAction)
        if guard_damage == GUARD_LEVEL_SMALL then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
            if GetStaminaRatio() < 0.4000000059604645 and IsExistAnime(ANIME_ID_GUARD_DAMAGE_SMALL_LOW) == TRUE then
                Fire("W_GuardDamageSmallLowStamina")
                return TRUE
            end
            Fire("W_GuardDamageSmall")
            return TRUE
        elseif guard_damage == GUARD_LEVEL_LARGE then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
            if GetStaminaRatio() < 0.4000000059604645 and IsExistAnime(ANIME_ID_GUARD_DAMAGE_LARGE_LOW) == TRUE then
                Fire("W_GuardDamageLargeLowStamina")
                return TRUE
            end
            Fire("W_GuardDamageLarge")
            return TRUE
        elseif guard_damage == GUARD_LEVEL_EXLARGE then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_EXLARGE)
            Fire("W_GuardDamageLarge")
            return TRUE
        else
            return FALSE
        end
    elseif damage_type == DAMAGE_TYPE_GUARD_BREAK then
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
        if env(GetSpEffectID, SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA) == TRUE then
            local damage_direction = env(GetReceivedDamageDirection)
            if damage_direction == DIRECTION_FORWARD then
                Fire("W_Event20000")
            elseif damage_direction == DIRECTION_LEFT then
                Fire("W_Event20002")
            elseif damage_direction == DIRECTION_RIGHT then
                Fire("W_Event20003")
            else
                Fire("W_Event20001")
            end
        else
            Fire("W_GuardBreak")
        end
        return TRUE
    end
    return FALSE
end

function ExecTypeDamage(damage_type)
    if damage_type == DAMAGE_TYPE_PARRY or damage_type >= DAMAGE_TYPE_PARRY_ENEMY1 and damage_type <= DAMAGE_TYPE_PARRY_ENEMY3 then
        if damage_type == DAMAGE_TYPE_PARRY_ENEMY2 then
            if IsExistAnime(ANIME_ID_PARRY_DAMAGE_ENEMY2) == TRUE then
                Fire("W_DamageParryEnemy2")
            else
                Fire("W_DamageParryEnemy1")
            end
        elseif IsExistAnime(ANIME_ID_PARRY_DAMAGE_ENEMY1) == TRUE then
            Fire("W_DamageParryEnemy1")
        else
            Fire("W_DamageParryEnemy2")
        end
        Replanning()
        return TRUE
    elseif damage_type >= DAMAGE_TYPE_WALL_ENEMY1 and damage_type <= DAMAGE_TYPE_WALL_ENEMY3 then
        if damage_type == DAMAGE_TYPE_WALL_ENEMY2 then
            if IsExistAnime(ANIME_ID_ATTACK_BOUND_ENEMY2) == TRUE then
                Replanning()
                Fire("W_AttackBoundEnemy2")
                return TRUE
            end
        elseif IsExistAnime(ANIME_ID_ATTACK_BOUND_ENEMY1) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy1")
            return TRUE
        end
    elseif damage_type >= DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and damage_type <= DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 then
        if damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 then
            if IsExistAnime(ANIME_ID_ATTACK_BOUND_ENEMY2) == TRUE then
                Replanning()
                Fire("W_AttackBoundEnemy2")
                return TRUE
            end
        elseif IsExistAnime(ANIME_ID_ATTACK_BOUND_ENEMY1) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy1")
            return TRUE
        end
    end
    return FALSE
end

function ExecWeakDamage()
    if env(GetSpEffectID, SP_EFFECT_VARIANT_YUPA_NO_WEAKDAMAGE) == TRUE then
        return FALSE
    end
    if env(GetIsWeakPoint) == TRUE then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_WEAK, FALSE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            act(SetDamageAnimType, DAMAGE_FLAG_WEAK)
            Replanning()
            Fire("W_DamageWeak")
            return TRUE
        end
    end
    return FALSE
end

function ExecDamageExLarge(damage_level)
    if damage_level == DAMAGE_LEVEL_FLING then
        if IsExistAnime(ANIME_ID_DAMAGE_FLING) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_FLING)
            Replanning()
            Fire("W_DamageFling")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_UPPER then
        if IsExistAnime(ANIME_ID_DAMAGE_UPPER) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_UPPER)
            Replanning()
            Fire("W_DamageUpper")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST or damage_level == DAMAGE_LEVEL_BREATH then
        if damage_level == DAMAGE_LEVEL_SMALL_BLOW and TRUE == env(GetSpEffectID, SP_EFFECT_UNDEAD_DOG) and env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE then
            return FALSE
        end
        if IsExistAnime(ANIME_ID_DAMAGE_SMALL_BLOW) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
            act(BlowDamageTurn)
            Replanning()
            Fire("W_DamageSmallBlow")
            return TRUE
        elseif IsExistAnime(ANIME_ID_DAMAGE_LARGE_BLOW) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE_BLOW)
            act(BlowDamageTurn)
            Replanning()
            Fire("W_DamageLargeBlow")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_LARGE_BLOW then
        if IsExistAnime(ANIME_ID_DAMAGE_LARGE_BLOW) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE_BLOW)
            act(BlowDamageTurn)
            Replanning()
            Fire("W_DamageLargeBlow")
            return TRUE
        elseif IsExistAnime(ANIME_ID_DAMAGE_SMALL_BLOW) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
            act(BlowDamageTurn)
            Replanning()
            Fire("W_DamageSmallBlow")
            return TRUE
        end
    end
    return FALSE
end

function ExecDamageDefault(damage_level)
    if damage_level == DAMAGE_LEVEL_SMALL then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_SMALL, TRUE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 1)
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
            ExecSyncAddDamage(damage_level)
            Replanning()
            Fire("W_DamageSmall")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_MIDDLE, TRUE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 2)
            act(SetDamageAnimType, DAMAGE_FLAG_MIDDlE)
            ExecSyncAddDamage(damage_level)
            Replanning()
            Fire("W_DamageMiddle")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_LARGE then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_LARGE, TRUE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 3)
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            ExecSyncAddDamage(damage_level)
            Replanning()
            Fire("W_DamageLarge")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_PUSH then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_PUSH, FALSE)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
            Replanning()
            Fire("W_DamagePush")
            return TRUE
        end
    end
    return FALSE
end

function GetDirOfPlayableDamage(id, check_atk_dir)
    local damage_direction = env(GetReceivedDamageDirection)
    if check_atk_dir == TRUE and damage_direction == DIRECTION_FORWARD then
        local dir_real = GetRealDir()
        if dir_real == LEFT_ADD then
            if IsExistAnime(id + DIRECTION_FRONTLEFT) == TRUE then
                return DIRECTION_FRONTLEFT
            end
        elseif dir_real == RIGHT_ADD and IsExistAnime(id + DIRECTION_FRONTRIGHT) == TRUE then
            return DIRECTION_FRONTRIGHT
        end
    end
    local offset = GetDamageDirectionOffset(damage_direction)
    local id_with_direction = id + offset
    if IsExistAnime(id_with_direction) == TRUE then
        return damage_direction
    elseif IsExistAnime(id) == TRUE then
        return DIRECTION_FORWARD
    end
    return INVALID
end

function ExecSyncAddDamage(damage_level)
    if env(IsPartDamageAdditiveBlendInvalid) == TRUE then
        return
    end
    if IsExistAnime(ANIME_ID_NO_ADD) == FALSE then
        return
    end
    local damage_elem = env(GetSpecialAttribute)
    if damage_elem == DAMAGE_ELEMENT_FIRE then
        local buff = {-1}
        if damage_level == DAMAGE_LEVEL_SMALL then
            buff[1] = ANIME_ID_BLEND_DAMAGE_FIRE_SMALL
            buff[2] = ANIME_ID_BLEND_DAMAGE_FIRE_MIDDLE
        elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
            buff[1] = ANIME_ID_BLEND_DAMAGE_FIRE_MIDDLE
        end
        if buff[1] >= 0 then
			local anim_id = -1
            for i = 1, #buff, 1 do
                if IsExistAnime(buff[i]) == TRUE then
                    anim_id = buff[i]
                    break
                end
            end
            if anim_id >= 0 then
                local event = "W_FireSmallDamageBlend_Add"
                if anim_id == ANIME_ID_BLEND_DAMAGE_FIRE_MIDDLE then
                    event = "W_FireMiddleDamageBlend_Add"
                end
                SetVariable("BlendDamageFire", 1)
                local index = GetRandomIndex(anim_id, 1, 2, 1)
                SetVariable("IndexFireDamageVariation", index)
                Fire(event)
                return
            end
        end
    end
    local buff = {-1}
    if damage_level == DAMAGE_LEVEL_SMALL then
        buff[1] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        buff[1] = ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT
        buff[2] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    elseif damage_level == DAMAGE_LEVEL_LARGE then
        buff[1] = ANIME_ID_BLEND_DAMAGE_LARGE_FRONT
        buff[2] = ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT
        buff[3] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    end
    if buff[1] >= 0 then
        local dir = GetRealDir()
		local anim_id = -1
        for i = 1, #buff, 1 do
            if IsExistAnime(buff[i] + dir) == TRUE then
                anim_id = buff[i]
                break
            end
        end
        if anim_id >= 0 then
            local event = "W_DirDamageSmall"
            if anim_id == ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT then
                event = "W_DirDamageMiddle"
            else
                if anim_id == ANIME_ID_BLEND_DAMAGE_LARGE_FRONT then
                    event = "W_DirDamageLarge"
                end
            end
            local dir_set = {"Front_Add", "Back_Add", "Left_Add", "Right_Add", "FrontUp_Add", "FrontDown_Add"}
            SetVariable("BlendDamageDir", 1)
            Fire(event .. dir_set[dir + 1])
            return
        end
    end
end

function GetRealDir()
    local pos_dir = env(GetReceivedDamageDirection)
    local atk_dir = env(GetAtkDirection)
    local real_dir = FRONT_ADD
    if atk_dir == ATTACK_DIR_FRONT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_UP then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONTUP_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_DOWN then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONTDOWN_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_LEFT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = LEFT_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = FRONT_ADD
        end
    elseif atk_dir == ATTACK_DIR_RIGHT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = LEFT_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = FRONT_ADD
        end
    end
    return real_dir
end

function ExecDamage(is_weak, ignore_guard_block)
    local damage_level = env(GetDamageLevel)
    local damage_type = env(GetReceivedDamageType)
    local is_damaged = env(HasReceivedAnyDamage)
    if damage_level == DAMAGE_LEVEL_MINIMUM and env(GetBehaviorID, BEH_IDENTIFIER_ROLLING) == TRUE and env(GetSpEffectID, SP_EFFECT_ROLLING_PUSH) == TRUE and env(GetSpEffectID, SP_EFFECT_IGNORE_ROLLING_PUSH) == FALSE then
        damage_level = DAMAGE_LEVEL_PUSH
    end
    local pre_sp_damage = SP_DAMAGE_NONE
    if env(GetSpEffectID, SP_EFFECT_SLEEP) == TRUE and env(GetSpEffectID, SP_EFFECT_MIMIC) == TRUE and env(GetSpEffectID, SP_EFFECT_DISABLE_SLEEP) == FALSE then
        pre_sp_damage = SP_DAMAGE_MIMIC
    end
    if env(GetBehaviorID, BEH_IDENTIFIER_ITEM_PARRY) == TRUE and env(GetSpEffectID, SP_EFFECT_KING_OF_STORM) == TRUE then
        pre_sp_damage = SP_DAMAGE_ITEM_PARRY
    end
    if env(GetBehaviorID, BEH_IDENTIFIER_FAT_BREAK) == TRUE and env(GetSpEffectID, SP_EFFECT_ROLLING_PUSH) == TRUE and env(GetSpEffectID, SP_EFFECT_IGNORE_ROLLING_PUSH) == FALSE then
        pre_sp_damage = SP_DAMAGE_FAT_BREAK
    end
    if is_damaged == FALSE and (damage_level == DAMAGE_LEVEL_NONE or damage_level == DAMAGE_LEVEL_MINIMUM) and (damage_type == DAMAGE_TYPE_NONE or damage_type == DAMAGE_TYPE_WEAK_FRAME) and pre_sp_damage == SP_DAMAGE_NONE then
        return FALSE
    end
    if env(GetSpEffectID, SP_EFFECT_HALLECK) == TRUE and env(GetSpEffectID, SP_EFFECT_STORMRULER) == TRUE and env(GetPartGroup) == 6 then
        act(AddSpEffect, SP_EFFECT_HALLECK_BREAK)
    end
    if env(GetSpEffectID, SP_EFFECT_DLC_BOSUMUSUME) == TRUE and TRUE == IsSpDamageAllowed() then
        Replanning()
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        Fire("W_DamageSpecial")
        return TRUE
    end
    if env(GetSpEffectID, SP_EFFECT_DLC2_BLACKKNIGHT) == TRUE then
        local DamageType = env(GetReceivedDamageType)
        if TRUE == IsSpDamageAllowed() and DamageType ~= DAMAGE_TYPE_PARRY_ENEMY1 and DamageType ~= DAMAGE_TYPE_PARRY_ENEMY2 then
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Fire("W_Event20000")
            return TRUE
        end
    end
    if env(GetSpEffectID, SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA_IKARING) == TRUE then
        local damage_level = env(GetDamageLevel)
        if damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_SMALL and damage_level ~= DAMAGE_LEVEL_MINIMUM and damage_level ~= DAMAGE_LEVEL_PUSH and TRUE == IsSpDamageAllowed() then
            Replanning()
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            Fire("W_Event20010")
            return TRUE
        end
    end
    SetVariable("BlendDamageDir", 0)
    SetVariable("BlendDamageFire", 0)
    if ignore_guard_block == TRUE and damage_type == DAMAGE_TYPE_GUARD then
        return FALSE
    end
    if ExecGuardBlock(damage_type) == TRUE then
        return TRUE
    end
    if ExecDamageExLarge(damage_level) == TRUE then
        return TRUE
    end
    if pre_sp_damage == SP_DAMAGE_MIMIC then
        Fire("W_Event20000")
        return TRUE
    end
    if env(IsDamageMotionOff) == FALSE then
        if ExecSpDamage(pre_sp_damage) == TRUE then
            return TRUE
        end
        if is_weak == FALSE and TRUE == ExecWeakDamage() then
            return TRUE
        end
        if ExecSaBreakDamage(damage_level) == TRUE then
            return TRUE
        end
    end
    if ExecTypeDamage(damage_type) == TRUE then
        return TRUE
    end
    if env(GetSpEffectID, SP_EFFECT_FULL_ARMOR_BEAST) == TRUE then
        damage_level = DAMAGE_LEVEL_NONE
    end
    if ExecNoSyncAddDamage(damage_level, is_damaged) == TRUE then
        return FALSE
    end
    if ExecDamageDefault(damage_level) == TRUE then
        return TRUE
    end
    if damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_MINIMUM and TRUE == ExecDamageDefault(DAMAGE_LEVEL_MIDDLE) then
        return TRUE
    end
    return FALSE
end

function GetDeathType()
    local damage_level = env(GetDamageLevel)
    local death_type = DEATH_TYPE_DEFAULT
    if damage_level == DAMAGE_LEVEL_LARGE_BLOW or damage_level == DAMAGE_LEVEL_SMALL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST or damage_level == DAMAGE_LEVEL_BREATH then
        death_type = DEATH_TYPE_BLAST
        if damage_level == DAMAGE_LEVEL_SMALL_BLOW and env(GetSpEffectID, SP_EFFECT_UNDEAD_DOG) == TRUE and env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE then
            death_type = DEATH_TYPE_FIRE
        end
    elseif damage_level == DAMAGE_LEVEL_UPPER then
        death_type = DEATH_TYPE_UPPER
    elseif damage_level == DAMAGE_LEVEL_FLING then
        death_type = DEATH_TYPE_FLING
    elseif env(GetIsWeakPoint) == TRUE then
        death_type = DEATH_TYPE_WEAK
    elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE then
        death_type = DEATH_TYPE_FIRE
    end
    return death_type
end

function GetDamageDirectionOffset(damage_direction)
    local offset = 1
    if damage_direction == 0 then
        offset = 2
    elseif damage_direction == 1 then
        offset = 3
    elseif damage_direction == 2 then
        offset = 0
    end
    return offset
end

function GetRandomIndex(base_anim_id, min, max, offset)
    local num = 0
	local ret = 0
    for i = min, max, 1 do
        local anim_offset = i * offset
        local anim_id = base_anim_id + anim_offset
        if IsExistAnime(anim_id) == FALSE then
            break
        end
        num = num + 1
    end
    if 0 < num then
        ret = env(GetRandomInt, 0, num)
    end
    return ret
end

function GetMoveDir(move_speed_level)
    local move_angle = GetVariable("MoveAngle")
    if math.abs(move_angle) <= 45 then
        if move_speed_level > 0.75 then
            return MOVE_TYPE_RUN
        else
            return MOVE_TYPE_WALK_FRONT
        end
    elseif move_angle >= 45 and move_angle <= 135 then
        return MOVE_TYPE_WALK_RIGHT
    elseif move_angle >= -135 and move_angle <= -45 then
        return MOVE_TYPE_WALK_LEFT
    else
        return MOVE_TYPE_WALK_BACK
    end
end

function ExecMove(move_type, is_on_cancel)
    local movement_speed_mult = 1.0
    
    -- Alacrity
    if env(GetSpEffectID, 113000) == TRUE then
        movement_speed_mult = 1.5
    end
    
    -- Painter's Pendant
    if env(GetSpEffectID, 113020) == TRUE then
        movement_speed_mult = 0.05
    end
    
    -- Apply movement speed change
    act(SetMovementScaleMult, movement_speed_mult)
    
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level <= 0 then
        return FALSE
    end
    if is_on_cancel == TRUE and FALSE == env(IsMoveCancelPossible) then
        return FALSE
    end
    
    if TRUE == env(IsMovingLaterally) then
        if move_type == MOVE_TYPE_PARALLEL then
            return FALSE
        end
        Fire("W_ParallelMove")
        return TRUE
    end
    local move_dir = GetMoveDir(move_speed_level)
    if move_type == move_dir then
        return FALSE
    end
    local ai_rec = env(GetAITargetAwareState)
    local ai_state = AI_STATE_DEFAULT
    if AI_RECOGNITION_NONE < ai_rec then
        ai_state = AI_STATE_BATTLE
    end
    local event = ""
    local move_table = {}
    local j = move_dir
    local action_type = env(GetAIActionType)
    if action_type == ACTION_TYPE_GUARD then
        move_table[1] = move_table_guard[j]
        if move_dir == MOVE_TYPE_RUN then
            move_table[2] = move_table_guard[MOVE_TYPE_WALK_FRONT]
            move_table[3] = move_table_battle[j]
            move_table[4] = move_table_battle[MOVE_TYPE_WALK_FRONT]
        else
            move_table[2] = move_table_battle[j]
        end
    elseif action_type == ACTION_TYPE_PARRY then
        move_table[1] = move_table_parry[j]
        if move_dir == MOVE_TYPE_RUN then
            move_table[2] = move_table_parry[MOVE_TYPE_WALK_FRONT]
            move_table[3] = move_table_battle[j]
            move_table[4] = move_table_battle[MOVE_TYPE_WALK_FRONT]
        else
            move_table[2] = move_table_battle[j]
        end
    elseif ai_state == AI_STATE_BATTLE then
        move_table[1] = move_table_battle[j]
        if move_dir == MOVE_TYPE_RUN then
            move_table[2] = move_table_battle[MOVE_TYPE_WALK_FRONT]
        end
    elseif move_dir == MOVE_TYPE_RUN then
        move_table[1] = move_table_default[j]
        move_table[2] = move_table_battle[j]
        move_table[3] = move_table_default[MOVE_TYPE_WALK_FRONT]
        move_table[4] = move_table_battle[MOVE_TYPE_WALK_FRONT]
    else
        move_table[1] = move_table_default[MOVE_TYPE_WALK_FRONT]
        move_table[2] = move_table_battle[MOVE_TYPE_WALK_FRONT]
    end
	local hit_move_type = MOVE_TYPE_NONE
    for i = 1, #move_table, 1 do
        if IsExistAnime(move_table[i][1]) == TRUE then
            event = move_table[i][2]
            hit_move_type = move_table[i][3]
            break
        end
    end
    if hit_move_type == MOVE_TYPE_NONE then
        return FALSE
    end
    if hit_move_type == move_type then
        return FALSE
    end
    SetIdleType(ai_state)
    Fire(event)
    return TRUE
end

function ExecStop()
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        return FALSE
    end
    local action_type = env(GetAIActionType)
    local event = "W_Idle"
    if action_type == ACTION_TYPE_GUARD then
        event = "W_GuardIdle"
    elseif action_type == ACTION_TYPE_PARRY then
        event = "W_ParryIdle"
    end
    Fire(event)
    return TRUE
end

function SetThrowFlag(attack, defense)
    act(SetAllowedThrowAttackType, attack)
    act(SetAllowedThrowDefenseType, defense)
end

function SetParallelMoveTae(angle)
    local front, back, left, right = false
    if math.abs(angle) >= 135 then
        back = true
    elseif angle > 45 then
        right = true
    elseif angle < -45 then
        left = true
    else
        front = true
    end
    SetVariable("ParallelMoveTaeFront", front)
    SetVariable("ParallelMoveTaeBack", back)
    SetVariable("ParallelMoveTaeRight", right)
    SetVariable("ParallelMoveTaeLeft", left)
end

function GetStaminaRatio()
    return env(GetStamina) / env(GetMaxStamina)
end

function SetThrowInvalid()
    SetThrowFlag(THROW_INVALID, THROW_INVALID)
end

function SetThrowDefInvalid()
    SetThrowFlag(THROW_DEFAULT, THROW_INVALID)

end

function ExecPassiveTransition(is_damage_state, is_weak, ignore_guard_block)
    if env(HasThrowRequest) == TRUE then
        return TRUE
    end
    if TRUE == ExecDeath() then
        return TRUE
    end
    if env(CheckForEventAnimPlaybackRequest) == TRUE then
        return TRUE
    end
    if ExecDamage(is_weak, ignore_guard_block) == TRUE then
        return TRUE
    end
    if ExecFallStart(is_damage_state) == TRUE then
        return TRUE
    end
    return FALSE
end

function ExecActiveTransition(is_on_cancel, style, move_type, enable_turn)
    if is_on_cancel == TRUE then
        if ExecAICancelAction(style) == TRUE then
            return TRUE
        end
    elseif ExecAIAction(style) == TRUE then
        return TRUE
    end
    if enable_turn == TRUE and ExecTurn(is_on_cancel) == TRUE then
        return TRUE
    end
    if ExecMove(move_type, is_on_cancel) == TRUE then
        return TRUE
    end
    return FALSE
end

function IdleCommonFunction(style)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAILadder() then
        return TRUE
    end
    if ExecActiveTransition(FALSE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAIStateChange() then
        return TRUE
    end
    return FALSE
end

function MoveCommonFunction(style, move_type)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAILadder() then
        return TRUE
    end
    if ExecActiveTransition(FALSE, style, move_type, FALSE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAIStateChange() then
        return TRUE
    end
    if TRUE == ExecStop() then
        return TRUE
    end
    return FALSE
end

function TurnCommonFunction(style)
    act(SetIsTurnAnimInProgress)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAILadder() then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function TransStyleCommonFunction(style)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function TransIdleCommonFunction()
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if TRUE == ExecAILadder() then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function GenerateCommonFunction()
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function StepCommonFunction(action_number)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function AttackCommonFunction(action_number, style, ignore_guard_block)
    if ExecPassiveTransition(FALSE, FALSE, ignore_guard_block) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function DamageCommonFunction(style, is_weak)
    if ExecPassiveTransition(TRUE, is_weak, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function IdleUniqueCommonFunction(id)
    act(SetIsEventAnim)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LandCommonFunction()
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function FallCommonFunction(fall_type)
    if ExecLand(fall_type) == TRUE then
        return TRUE
    end
    return FALSE
end

function EventCommonFunction()
    act(SetIsEventAnim)
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function ThrowCommonFunction()
    if env(IsThrowing) == TRUE then
        if env(IsMoveCancelPossible) == TRUE then
            act(RequestThrowAnimInterrupt)
        end
    else
        if TRUE == ExecDeath() then
            return TRUE
        end
        if env(CheckForEventAnimPlaybackRequest) == TRUE then
            return TRUE
        end
        if TRUE == ExecDamage(FALSE, FALSE) then
            return TRUE
        end
    end
    if TRUE == ExecFallStart(FALSE) then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function ExecAILadder()
    local action_type = env(GetAIActionType)
    if action_type == LADDER_REQUEST_UP then
        Fire("W_LadderRemoveWeaponBottom")
        return TRUE
    elseif action_type == LADDER_REQUEST_DOWN then
        Fire("W_LadderRemoveWeaponTop")
        return TRUE
    end
    return FALSE
end

function ExecLadderFall()
    local hp = env(GetHP)
    if hp <= 0 then
        Fire("W_LadderDeath")
        return TRUE
    end
    local stamina = env(GetStamina)
    if stamina <= 0 then
        Fire("W_LadderFallStart")
        return TRUE
    end
    return FALSE
end

function ExecLadderDamage(hand)
    if env(HasReceivedAnyDamage) == FALSE then
        return FALSE
    end
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    local stamina = env(GetStamina)
    if stamina <= LADDER_DAMAGE_STAMINA_THREAHOLD then
        act(ChangeStamina, LADDER_LARGE_DAMAGE_STAMINA_CONSUME)
        Fire("W_LadderDamageLarge" .. event_hand)
        return TRUE
    else
        act(ChangeStamina, LADDER_SMALL_DAMAGE_STAMINA_CONSUME)
        Fire("W_LadderDamageSmall" .. event_hand)
        return TRUE
    end
    return FALSE
end

function ExecLadderNextAction(hand, is_idle)
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    local action_type = env(GetAIActionType)
    if action_type == LADDER_REQUEST_UP then
        if env(IsReachTopOfLadder) == TRUE then
            Fire("W_LadderEndTop" .. event_hand)
            return TRUE
        end
        if env(DoesLadderHaveCharacters, CONFLICT_DIST_CHR, UPSIDE, PLAYER) == TRUE then
            local stamina = env(GetStamina)
            if stamina < LADDER_ATTACK_STAMINA_THRESHOLD then
                return FALSE
            end
            Fire("W_LadderAttackUp" .. event_hand)
            act(ChangeStamina, LADDER_ATTACK_STAMINA_CONSUME)
            return TRUE
        end
        if env(IsSomeoneOnLadder, CONFLICT_DIST_CHR, 0) == TRUE then
            if is_idle == TRUE and env(DoesLadderHaveCharacters, 0, UPSIDE, ENEMY) == TRUE and env(IsReachBottomOfLadder) == TRUE then
                Fire("W_LadderEndBottom" .. event_hand)
                return TRUE
            end
            return FALSE
        end
        Fire("W_LadderUp" .. event_hand)
        return TRUE
    elseif action_type == LADDER_REQUEST_DOWN then
        if env(IsReachBottomOfLadder) == TRUE then
            Fire("W_LadderEndBottom" .. event_hand)
            return TRUE
        end
        if env(DoesLadderHaveCharacters, CONFLICT_DIST_CHR, DOWNSIDE, PLAYER) == TRUE then
            local stamina = env(GetStamina)
            if stamina < LADDER_ATTACK_STAMINA_THRESHOLD then
                return FALSE
            end
            Fire("W_LadderAttackDown" .. event_hand)
            act(ChangeStamina, LADDER_ATTACK_STAMINA_CONSUME)
            return TRUE
        end
        if env(IsSomeoneUnderLadder, CONFLICT_DIST_COAST, 0) == FALSE then
            Fire("W_LadderCoastStart")
            return TRUE
        end
        if is_idle == TRUE and env(IsSomeoneUnderLadder, CONFLICT_DIST_CHR, 0) == TRUE then
            Fire("W_FallingDefault")
            LadderSetActionState(LADDER_ACTION_INVALID)
            return TRUE
        end
        Fire("W_LadderDown" .. event_hand)
        return TRUE
    end
    if is_idle == FALSE then
        Fire("W_LadderIdle" .. event_hand)
        return TRUE
    end
    return FALSE
end

function ExecLadderCoastNextAction(hand)
    if env(IsReachBottomOfLadder) == TRUE then
        Fire("W_LadderCoastEnd")
        return TRUE
    end
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    if env(IsSomeoneUnderLadder, CONFLICT_DIST_CHR, 0) == FALSE then
        Fire("W_LadderCoast" .. event_hand)
        return TRUE
    else
        Fire("W_LadderCoastStop" .. event_hand)
        return TRUE
    end
    return FALSE
end

function LadderIdleCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if ExecLadderNextAction(hand, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderMoveCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if TRUE == env(IsAnimEnd, 1) and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderAttackCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if TRUE == env(IsAnimEnd, 1) and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderDamageCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if TRUE == env(IsAnimEnd, 1) and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderStartEndCommonFunction()
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderEquipWeaponCommonFunction()
    if ExecPassiveTransition(FALSE, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderCoastCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if TRUE == env(IsAnimEnd, 1) and ExecLadderCoastNextAction(hand) == TRUE then
        return TRUE
    end
    return FALSE
end

function LadderSendCommand(command)
    if command ~= LADDER_COMMAND_INVALID then
        act(SendMessageIDToEvents, command)
    end
end

function LadderSetActionState(state)
    act(SetLadderActionState, state)
end

function Init_onActivate()
    SetVariable("IdleUniqueStartTime", math.random() * 3)
end

function Init_onUpdate()
    act(SetThrowState, THROW_STATE_NONE)
    local event_id = env(GetCommandIDFromEvent, 1)
    if event_id == 2160 then
        Fire("W_Event30003")
        return
    end
    local hp = env(GetHP)
    local damage_type = env(GetReceivedDamageType)
    if damage_type == DAMAGE_TYPE_DEATHIDLE or hp <= 0 then
        SetVariable("IndexDeathIdleVariation", 0)
        Fire("W_DeathIdleDefault")
        return
    end
    if env(IsGenerateAction) == TRUE then
        Fire("W_Generate")
        return
    end
    SetIdleType(AI_STATE_DEFAULT)
    Fire("W_Idle")
    return
end

function IdleUnique700_onUpdate()
    if IdleUniqueCommonFunction(700) == TRUE then
        return
    end
end

function IdleUnique701_onUpdate()
    if IdleUniqueCommonFunction(701) == TRUE then
        return
    end
end

function IdleUnique702_onUpdate()
    if IdleUniqueCommonFunction(702) == TRUE then
        return
    end
end

function IdleUnique703_onUpdate()
    if IdleUniqueCommonFunction(703) == TRUE then
        return
    end
end

function IdleUnique704_onUpdate()
    if IdleUniqueCommonFunction(704) == TRUE then
        return
    end
end

function IdleUnique705_onUpdate()
    if IdleUniqueCommonFunction(705) == TRUE then
        return
    end
end

function IdleUnique706_onUpdate()
    if IdleUniqueCommonFunction(706) == TRUE then
        return
    end
end

function IdleUnique707_onUpdate()
    if IdleUniqueCommonFunction(707) == TRUE then
        return
    end
end

function IdleUnique708_onUpdate()
    if IdleUniqueCommonFunction(708) == TRUE then
        return
    end
end

function IdleUnique709_onUpdate()
    if IdleUniqueCommonFunction(709) == TRUE then
        return
    end
end

function IdleUnique710_onUpdate()
    if IdleUniqueCommonFunction(710) == TRUE then
        return
    end
end

function Generate_onUpdate()
    if GenerateCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1700_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1701_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1702_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1703_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1704_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1705_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1706_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1707_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1708_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1709_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleUniqueToIdle1710_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function IdleDefault_onUpdate()
    if IdleCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function IdleBattle_onUpdate()
    if IdleCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TransToDefaultFromBattle_onUpdate()
    if TransIdleCommonFunction() == TRUE then
        return
    end
end

function TransToBattleFromDefault_onUpdate()
    if TransIdleCommonFunction() == TRUE then
        return
    end
end

function ParryStart_onUpdate()
    if TransStyleCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function Attack4000_onUpdate()
    if AttackCommonFunction(4000, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function ParryEnd_onUpdate()
    if TransStyleCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function ParryIdle_onUpdate()
    if IdleCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function ParryWalkFront_onUpdate()
    if MoveCommonFunction(STYLE_PARRY, MOVE_TYPE_WALK_FRONT) == TRUE then
        return
    end
end

function ParryWalkBack_onUpdate()
    if MoveCommonFunction(STYLE_PARRY, MOVE_TYPE_WALK_BACK) == TRUE then
        return
    end
end

function ParryWalkLeft_onUpdate()
    if MoveCommonFunction(STYLE_PARRY, MOVE_TYPE_WALK_LEFT) == TRUE then
        return
    end
end

function ParryWalkRight_onUpdate()
    if MoveCommonFunction(STYLE_PARRY, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return
    end
end

function ParryRun_onUpdate()
    if MoveCommonFunction(STYLE_PARRY, MOVE_TYPE_RUN) == TRUE then
        return
    end
end

function GuardStart_onUpdate()
    if TransStyleCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function GuardEnd_onUpdate()
    if TransStyleCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function GuardIdle_onUpdate()
    if IdleCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function GuardWalkFront_onUpdate()
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_FRONT) == TRUE then
        return
    end
end

function GuardWalkBack_onUpdate()
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_BACK) == TRUE then
        return
    end
end

function GuardWalkLeft_onUpdate()
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_LEFT) == TRUE then
        return
    end
end

function GuardWalkRight_onUpdate()
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return
    end
end

function GuardRun_onUpdate()
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_RUN) == TRUE then
        return
    end
end

function RunBattle_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN) == TRUE then
        return
    end
end

function WalkFrontBattle_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return
    end
end

function WalkLeftBattle_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_LEFT) == TRUE then
        return
    end
end

function WalkBackBattle_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_BACK) == TRUE then
        return
    end
end

function WalkRightBattle_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return
    end
end

function RunDefault_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN) == TRUE then
        return
    end
end

function WalkFrontDefault_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return
    end
end

function ParallelMove_onUpdate()
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_PARALLEL) == TRUE then
        return
    end
end

function Attack3000_onUpdate()
    if AttackCommonFunction(3000, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3001_onUpdate()
    if AttackCommonFunction(3001, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3002_onUpdate()
    if AttackCommonFunction(3002, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3003_onUpdate()
    if AttackCommonFunction(3003, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3004_onUpdate()
    if AttackCommonFunction(3004, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3005_onUpdate()
    if AttackCommonFunction(3005, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3006_onUpdate()
    if AttackCommonFunction(3006, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3007_onUpdate()
    if AttackCommonFunction(3007, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3008_onUpdate()
    if AttackCommonFunction(3008, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3009_onUpdate()
    if AttackCommonFunction(3009, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3010_onUpdate()
    if AttackCommonFunction(3010, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3011_onUpdate()
    if AttackCommonFunction(3011, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3012_onUpdate()
    if env(GetSpEffectID, SP_EFFECT_DARK_DORAGON_3012to20) == TRUE then
        Fire("W_IdleBattle")
        return
    end
    if AttackCommonFunction(3012, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3013_onUpdate()
    if AttackCommonFunction(3013, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3014_onUpdate()
    if AttackCommonFunction(3014, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3015_onUpdate()
    if env(GetSpEffectID, SP_EFFECT_DLC2_ABADON_SMALL_3015to30000) == TRUE then
        Fire("W_Event30000")
        return
    end
    if AttackCommonFunction(3015, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3016_onUpdate()
    if AttackCommonFunction(3016, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3017_onUpdate()
    if AttackCommonFunction(3017, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3018_onUpdate()
    if AttackCommonFunction(3018, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3019_onUpdate()
    if AttackCommonFunction(3019, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3020_onUpdate()
    if AttackCommonFunction(3020, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3021_onUpdate()
    if AttackCommonFunction(3021, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3022_onUpdate()
    if AttackCommonFunction(3022, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3023_onUpdate()
    if AttackCommonFunction(3023, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3024_onUpdate()
    if AttackCommonFunction(3024, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3025_onUpdate()
    if AttackCommonFunction(3025, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3026_onUpdate()
    if AttackCommonFunction(3026, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3027_onUpdate()
    if env(GetSpEffectID, SP_EFFECT_DARK_DORAGON_3027to20) == TRUE then
        Fire("W_IdleBattle")
        return
    end
    if AttackCommonFunction(3027, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3028_onUpdate()
    if AttackCommonFunction(3028, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3029_onUpdate()
    if AttackCommonFunction(3029, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3030_onUpdate()
    if AttackCommonFunction(3030, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3031_onUpdate()
    if AttackCommonFunction(3031, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3032_onUpdate()
    if AttackCommonFunction(3032, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3033_onUpdate()
    if AttackCommonFunction(3033, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3034_onUpdate()
    if AttackCommonFunction(3034, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3035_onUpdate()
    if AttackCommonFunction(3035, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3036_onUpdate()
    if AttackCommonFunction(3036, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3037_onUpdate()
    if AttackCommonFunction(3037, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3038_onUpdate()
    if AttackCommonFunction(3038, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3039_onUpdate()
    if AttackCommonFunction(3039, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3110_onUpdate()
    if AttackCommonFunction(3110, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3200_onUpdate()
    if AttackCommonFunction(3200, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3201_onUpdate()
    if AttackCommonFunction(3201, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3202_onUpdate()
    if AttackCommonFunction(3202, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3203_onUpdate()
    if AttackCommonFunction(3203, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack3204_onUpdate()
    if AttackCommonFunction(3204, STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function Attack4600_onUpdate()
    if AttackCommonFunction(4600, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
    if TRUE == env(IsAnimEnd, 1) then
        if TRUE == env(GetStateChangeType, SP_EFFECT_TYPE_DISABLE_EST) then
            ExecAttack(4602)
            return
        else
            ExecAttack(4601)
            return
        end
    end
end

function Attack4601_onUpdate()
    if AttackCommonFunction(4601, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function Attack4602_onUpdate()
    if AttackCommonFunction(4602, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function Attack1500_onUpdate()
    if AttackCommonFunction(1500, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function Attack1600_onUpdate()
    if AttackCommonFunction(1600, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function Attack1810_onUpdate()
    if AttackCommonFunction(1810, STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function Step6000_onUpdate()
    if StepCommonFunction(6000) == TRUE then
        return
    end
end

function Step6001_onUpdate()
    if StepCommonFunction(6001) == TRUE then
        return
    end
end

function Step6002_onUpdate()
    if StepCommonFunction(6002) == TRUE then
        return
    end
end

function Step6003_onUpdate()
    if StepCommonFunction(6003) == TRUE then
        return
    end
end

function TurnDefault_Left90_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnDefault_Right90_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnDefault_Left180_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnDefault_Right180_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnDefault_Left45_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnDefault_Right45_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Left90_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Right90_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Left180_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Right180_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Left45_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnBattle_Right45_onUpdate()
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return
    end
end

function TurnGuard_Left90_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnGuard_Right90_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnGuard_Left180_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnGuard_Right180_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnGuard_Left45_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnGuard_Right45_onUpdate()
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return
    end
end

function TurnParry_Left90_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function TurnParry_Left180_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function TurnParry_Left45_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function TurnParry_Right90_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function TurnParry_Right180_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function TurnParry_Right45_onUpdate()
    if TurnCommonFunction(STYLE_PARRY) == TRUE then
        return
    end
end

function DamageSpecial_onActivate()
    CallActionState(0)
end

function DamageSpecial_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function SABreak_onActivate()
    CallActionState(0)
end

function SABreak_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageSmall_onActivate()
    CallActionState(0)
end

function DamageSmall_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageMiddle_onActivate()
    CallActionState(0)
end

function DamageMiddle_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageLarge_onActivate()
    CallActionState(0)
end

function DamageLarge_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageLargeBlow_onActivate()
    CallActionState(0)
end

function DamageLargeBlow_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageSmallBlow_onActivate()
    CallActionState(0)
end

function DamageSmallBlow_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageFling_onActivate()
    CallActionState(0)
end

function DamageFling_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamagePush_onActivate()
    CallActionState(0)
end

function DamagePush_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageUpper_onActivate()
    CallActionState(0)
end

function DamageUpper_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageWeak_onActivate()
    CallActionState(0)
end

function DamageWeak_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, TRUE) == TRUE then
        return
    end
end

function DamageSmallFire_onActivate()
    CallActionState(0)
end

function DamageSmallFire_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageLargeFire_onActivate()
    CallActionState(0)
end

function DamageLargeFire_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function GuardDamageSmall_onActivate()
    CallActionState(0)
end

function GuardDamageSmall_onUpdate()
    act(SetStaminaRecoveryDisabled)
    if DamageCommonFunction(STYLE_GUARD, FALSE) == TRUE then
        return
    end
end

function GuardDamageSmallLowStamina_onActivate()
    CallActionState(0)
end

function GuardDamageSmallLowStamina_onUpdate()
    act(SetStaminaRecoveryDisabled)
    if DamageCommonFunction(STYLE_GUARD, FALSE) == TRUE then
        return
    end
end

function GuardDamageMiddle_onActivate()
    CallActionState(0)
end

function GuardDamageMiddle_onUpdate()
    if DamageCommonFunction(STYLE_GUARD, FALSE) == TRUE then
        return
    end
end

function GuardDamageLarge_onActivate()
    CallActionState(0)
end

function GuardDamageLarge_onUpdate()
    act(SetStaminaRecoveryDisabled)
    if DamageCommonFunction(STYLE_GUARD, FALSE) == TRUE then
        return
    end
end

function GuardDamageLargeLowStamina_onActivate()
    CallActionState(0)
end

function GuardDamageLargeLowStamina_onUpdate()
    act(SetStaminaRecoveryDisabled)
    if DamageCommonFunction(STYLE_GUARD, FALSE) == TRUE then
        return
    end
end

function GuardBreak_onActivate()
    CallActionState(0)
end

function GuardBreak_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageParryEnemy1_onActivate()
    CallActionState(0)
end

function DamageParryEnemy1_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DamageParryEnemy2_onActivate()
    CallActionState(0)
end

function DamageParryEnemy2_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function AttackBoundEnemy1_onActivate()
    CallActionState(0)
end

function AttackBoundEnemy1_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function AttackBoundEnemy2_onActivate()
    CallActionState(0)
end

function AttackBoundEnemy2_onUpdate()
    if DamageCommonFunction(STYLE_DEFAULT, FALSE) == TRUE then
        return
    end
end

function DeathStart_Activate()
    act("イベントアニメ再生要求拒否")
end

function DeathStart_Update()
    act("イベントアニメ再生要求拒否")
end

function DeathStartDefault_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT) == TRUE then
        return
    end
end

function DeathStartFire_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_FIRE) == TRUE then
        return
    end
end

function DeathStartWeak_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_WEAK) == TRUE then
        return
    end
end

function DeathStartBlast_onActivate()
    act(BlowDamageTurn)
end

function DeathStartBlast_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_BLAST) == TRUE then
        return
    end
end

function DeathStartFling_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_FLING) == TRUE then
        return
    end
end

function DeathStartUpper_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_UPPER) == TRUE then
        return
    end
end

function DeathStartLandDefault_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_DEFAULT) == TRUE then
        return
    end
end

function DeathStartLandUpward_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_UPWARD) == TRUE then
        return
    end
end

function DeathStartLandDownward_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_DOWNWARD) == TRUE then
        return
    end
end

function FallingDefault_onUpdate()
    if FallCommonFunction(FALL_DEFAULT) == TRUE then
        return
    end
end

function FallingUpward_onUpdate()
    if FallCommonFunction(FALL_UPWARD) == TRUE then
        return
    end
end

function FallingDownward_onUpdate()
    if FallCommonFunction(FALL_DOWNWARD) == TRUE then
        return
    end
end

function LandDefault_onUpdate()
    if LandCommonFunction() == TRUE then
        return
    end
end

function LandHeavy_onUpdate()
    if LandCommonFunction() == TRUE then
        return
    end
end

function LandUpward_onUpdate()
    if LandCommonFunction() == TRUE then
        return
    end
end

function LandDownward_onUpdate()
    if LandCommonFunction() == TRUE then
        return
    end
end

function Throw_Activate()
    SetVariable("ThrowID", env(GetThrowAnimID))
end

function Throw_Deactivate()
    act(SetThrowState, THROW_STATE_NONE)
end

function ThrowAtk_onActivate()
    Replanning()
end

function ThrowAtk_onUpdate()
    if env(DidOpponentDieFromThrow) == TRUE and TRUE == IsExistAnime(GetVariable("ThrowID") + 1) then
        Fire("W_ThrowKill")
        return
    end
    if env(HasThrowEnded) == TRUE and TRUE == IsExistAnime(GetVariable("ThrowID") + 2) then
        Fire("W_ThrowRelease")
        return
    end
    if TRUE == ThrowCommonFunction() then
        return
    end
end

function ThrowDef_onActivate()
    Replanning()
end

function ThrowDef_onUpdate()
    if env(GetHP) <= 1 and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_DEAD) == TRUE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_THROWDEAD) == TRUE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_UNABLE_DEAD) == FALSE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU_DONE) == FALSE then
        if env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU) == FALSE then
            Fire("W_ThrowDefDeath")
        elseif env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_BEAM) == TRUE then
            Fire("W_Event20004")
        else
            Fire("W_Event20005")
        end
        return
    end
    if env(IsThrowSelfDeath) == TRUE and env(GetSpEffectID, SP_EFFECT_CRIMSONBAT_HU_DONE) == TRUE then
        Fire("W_Event20008")
        return
    end
    if env(IsThrowSelfDeath) == TRUE then
        if env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_UNDEAD) ~= TRUE or env(GetHP) <= 0 then
            Fire("W_ThrowDefDeath")
        end
        return
    end
    if env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_FATHERDEAD) == TRUE and env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_MODE3) == FALSE then
        if env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_THROWDEAD) == TRUE then
            Fire("W_Event20004")
            return
        elseif env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_PARRYDEAD) == TRUE then
            Fire("W_Event20005")
            return
        elseif env(GetSpEffectID, SP_EFFECT_DLC_BOSSMUSUME_NORMALDEAD) == TRUE then
            Fire("W_Event20003")
            return
        end
    end
    if TRUE == ThrowCommonFunction() then
        return
    end
    if env(IsAnimEnd, 1) == TRUE then
        if env(GetSpEffectID, SP_EFFECT_TINDALOS_THROW_DEF) == TRUE then
            Fire("W_Event20005")
            return
        else
            Fire("W_Idle")
            return
        end
    end
end

function ThrowRelease_onUpdate()
    if ThrowCommonFunction() == TRUE then
        return
    end
end

function ThrowKill_onUpdate()
    if ThrowCommonFunction() == TRUE then
        return
    end
end

function ThrowDefDeath_onActivate()
    act(SetThrowState, THROW_STATE_NONE)
end

function ThrowDefDeath_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF) == TRUE then
        return
    end
end

function ThrowDefDeathIdle_onActivate()
    act(SetThrowState, THROW_STATE_NONE)
end

function Event14000_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Event14001_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Event14010_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Event14011_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Event14020_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Event14021_onUpdate()
    if EventCommonFunction() == TRUE then
        return
    end
end

function Ladder_Activate()
    act("イベントアニメ再生要求拒否")
end

function Ladder_Update()
    act("イベントアニメ再生要求拒否")
    SetThrowInvalid()
    LadderSetActionState(INVALID)
end

function LadderIdleLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderIdleCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderIdleRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderIdleCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderUpRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
end

function LadderUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderUpLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
end

function LadderUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderDownRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderDownLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderStartTop_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderStartTop_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderStartBottom_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
end

function LadderStartBottom_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderEndTopLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
end

function LadderEndTopLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderEndTopRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
end

function LadderEndTopRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderEndTopRight_onDeactivate()

end

function LadderEndBottomLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderEndBottomLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderEndBottomRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderEndBottomRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderAttackDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_LEFT)
    if LadderAttackCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderAttackDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_RIGHT)
    if LadderAttackCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderAttackUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_LEFT)
    if LadderAttackCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderAttackUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_RIGHT)
    if LadderAttackCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderDamageSmallRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_SMALL_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderDamageSmallLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_SMALL_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderDamageLargeRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_LARGE_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderDamageLargeLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_LARGE_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderFallStart_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
end

function LadderFall_onUpdate()
    if ExecLand(FALL_LADDER) == TRUE then
        return
    end
end

function LadderFallLand_onUpdate()
    if LandCommonFunction() == TRUE then
        return
    end
end

function LadderCoastStart_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_START_LEFT)
    if LadderCoastCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderCoastLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderCoastLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_LEFT)
    if LadderCoastCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderCoastRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderCoastRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_RIGHT)
    if LadderCoastCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderCoastStopLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return
    end
end

function LadderCoastStopRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return
    end
end

function LadderCoastEnd_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
end

function LadderCoastEnd_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_LANDING)
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderDeath_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
end

function LadderDeathFall_onUpdate()
    if ExecLand(FALL_LADDER) == TRUE then
        return
    end
end

function DeathStartLadder_onUpdate()
    if ExecTransToDeathIdle(DEATH_TYPE_LADDER) == TRUE then
        return
    end

end

function LadderRemoveWeaponBottom_onUpdate()
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderRemoveWeaponTop_onUpdate()
    if LadderStartEndCommonFunction() == TRUE then
        return
    end
end

function LadderEquipWeapon_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
    if LadderEquipWeaponCommonFunction() == TRUE then
        return
    end
end

function Attack3100_onUpdate()
    if AttackCommonFunction(3100, STYLE_GUARD, TRUE) == TRUE then
        return
    end
end

function Attack3101_onUpdate()
    if AttackCommonFunction(3101, STYLE_GUARD, TRUE) == TRUE then
        return
    end
end

function Attack3102_onUpdate()
    if AttackCommonFunction(3102, STYLE_GUARD, TRUE) == TRUE then
        return
    end
end

function Attack3103_onUpdate()
    if AttackCommonFunction(3103, STYLE_GUARD, TRUE) == TRUE then
        return
    end
end

function Attack3104_onUpdate()
    if AttackCommonFunction(3104, STYLE_GUARD, TRUE) == TRUE then
        return
    end
end

function PartBlend_NoAdd1_onUpdate()
    SetVariable("BlendPart1", 0)
end

function PartBlend_NoAdd2_onUpdate()
    SetVariable("BlendPart2", 0)
end

function PartBlend_NoAdd3_onUpdate()
    SetVariable("BlendPart3", 0)
end

function PartBlend_NoAdd4_onUpdate()
    SetVariable("BlendPart4", 0)
end

function PartBlend_NoAdd5_onUpdate()
    SetVariable("BlendPart5", 0)
end

function PartBlend_NoAdd6_onUpdate()
    SetVariable("BlendPart6", 0)
end

function PartBlend_NoAdd7_onUpdate()
    SetVariable("BlendPart7", 0)
end

function PartBlend_NoAdd8_onUpdate()
    SetVariable("BlendPart8", 0)
end

function PartBlend_NoAdd9_onUpdate()
    SetVariable("BlendPart9", 0)
end

function PartBlend_NoAdd10_onUpdate()
    SetVariable("BlendPart10", 0)
end

function PartBlend_NoAdd11_onUpdate()
    SetVariable("BlendPart11", 0)
end

function PartBlend_NoAdd12_onUpdate()
    SetVariable("BlendPart12", 0)
end

function PartBlend_NoAdd13_onUpdate()
    SetVariable("BlendPart13", 0)
end

function PartBlend_NoAdd14_onUpdate()
    SetVariable("BlendPart14", 0)
end

function PartBlend_NoAdd15_onUpdate()
    SetVariable("BlendPart15", 0)
end

function PartBlend_NoAdd16_onUpdate()
    SetVariable("BlendPart16", 0)
end

function SABlend_NoAdd_onUpdate()
    SetVariable("BlendSA", 0)
end

function DamageBlend_NoAdd_onUpdate()
    SetVariable("BlendDamageDir", 0)
end

function FireDamageBlend_NoAdd_onUpdate()
    SetVariable("BlendDamageFire", 0)
end

function ParallelMove_Update()
    local ret = nil
    local move_angle = GetVariable("MoveAngle")
    local move_angle_real = GetVariable("MoveAngleReal")
    local dT = env(ObtainedDT) / 1000
    local threshold = 45 * dT
    local gap = move_angle - move_angle_real
    local gap_abs = math.abs(gap)
    local inverse = FALSE
    if gap_abs > 180 then
        gap_abs = 360 - gap_abs
        inverse = TRUE
    end
    if threshold < gap_abs then
        if move_angle_real < move_angle then
            if inverse == FALSE then
                ret = move_angle_real + threshold
            else
                ret = move_angle_real - threshold
            end
        elseif move_angle < move_angle_real then
            if inverse == FALSE then
                ret = move_angle_real - threshold
            else
                ret = move_angle_real + threshold
            end
        else
            ret = move_angle
        end
        if ret > 180 then
            ret = -180 + ret - 180
        elseif ret < -180 then
            ret = 180 + 180 + ret
        end
    else
        ret = move_angle
    end
    SetVariable("MoveAngleReal", ret)
    SetParallelMoveTae(ret)
end

function ThrowAtk_Activate()
    SetVariable("ThrowHoldBlendWeight", 0)
    SetVariable("ThrowHolding", false)
    SetVariable("ThrowNoRegistTime", 0)
end

function ThrowAtk_Update()
    if IsExistAnime(GetVariable("ThrowID") + 3) == FALSE then
        return
    end
    local regist_num = env(GetThrowDefenseCount)
    local dT = env(ObtainedDT) / 1000
    local blend_weight = GetVariable("ThrowHoldBlendWeight")
    local is_holding = GetVariable("ThrowHolding")
    local no_regist_time = GetVariable("ThrowNoRegistTime")
    if regist_num > 0 then
        is_holding = true
    end
    if is_holding == true then
        if regist_num <= 0 then
            no_regist_time = no_regist_time + dT
        end
        if no_regist_time > 0.699999988079071 then
            is_holding = false
        else
            blend_weight = blend_weight + 2 * dT
            if blend_weight > 0.9900000095367432 then
                blend_weight = 0.9900000095367432
            end
            SetVariable("IsEnableTAEThrowHold", true)
        end
    else
        no_regist_time = 0
        blend_weight = blend_weight - 4 * dT
        if blend_weight < 0.009999999776482582 then
            blend_weight = 0.009999999776482582
            SetVariable("IsEnableTAEThrowHold", false)
        else
            SetVariable("IsEnableTAEThrowHold", true)
        end
    end
    SetVariable("ThrowHoldBlendWeight", blend_weight)
    SetVariable("ThrowHolding", is_holding)
    SetVariable("ThrowNoRegistTime", no_regist_time)
end

function Damage_Update()
    if env(GetSpEffectID, SP_EFFECT_ENABLE_PARRY_THROW) == FALSE then
        SetThrowDefInvalid()
    end
end

function Update()
    g_FrameCount = g_FrameCount + 1
end

------------------------
-- Core: Variables
------------------------
TRUE = 1
FALSE = 0
INVALID = -1
STYLE_DEFAULT = 0
STYLE_GUARD = 1
STYLE_PARRY = 2
MOVE_TYPE_NONE = 0
MOVE_TYPE_WALK_FRONT = 1
MOVE_TYPE_WALK_BACK = 2
MOVE_TYPE_WALK_LEFT = 3
MOVE_TYPE_WALK_RIGHT = 4
MOVE_TYPE_RUN = 5
MOVE_TYPE_PARALLEL = 6
AI_STATE_DEFAULT = 0
AI_STATE_BATTLE = 1
AI_RECOGNITION_NONE = 0
INDEX_TURN_BATTLE = 0
INDEX_TURN_DEFAULT = 1
INDEX_TURN_GUARD = 2
INDEX_TURN_PARRY = 3
INDEX_TURN_DIRECTION_LEFT90 = 0
INDEX_TURN_DIRECTION_RIGHT90 = 1
INDEX_TURN_DIRECTION_LEFT180 = 2
INDEX_TURN_DIRECTION_RIGHT180 = 3
INDEX_TURN_DIRECTION_LEFT45 = 4
INDEX_TURN_DIRECTION_RIGHT45 = 5
THROW_INVALID = 255
THROW_DEFAULT = 0
THROW_STATE_NONE = 0
GUARD_LEVEL_SMALL = 1
GUARD_LEVEL_MIDDLE = 2
GUARD_LEVEL_LARGE = 3
GUARD_LEVEL_EXLARGE = 4
DAMAGE_LEVEL_NONE = 0
DAMAGE_LEVEL_SMALL = 1
DAMAGE_LEVEL_MIDDLE = 2
DAMAGE_LEVEL_LARGE = 3
DAMAGE_LEVEL_LARGE_BLOW = 4
DAMAGE_LEVEL_PUSH = 5
DAMAGE_LEVEL_FLING = 6
DAMAGE_LEVEL_SMALL_BLOW = 7
DAMAGE_LEVEL_MINIMUM = 8
DAMAGE_LEVEL_UPPER = 9
DAMAGE_LEVEL_EX_BLAST = 10
DAMAGE_LEVEL_BREATH = 11
DAMAGE_FLAG_MINIMUM = 0
DAMAGE_FLAG_SMALL = 1
DAMAGE_FLAG_MIDDlE = 2
DAMAGE_FLAG_LARGE = 3
DAMAGE_FLAG_SMALL_BLOW = 4
DAMAGE_FLAG_LARGE_BLOW = 5
DAMAGE_FLAG_FLING = 6
DAMAGE_FLAG_UPPER = 7
DAMAGE_FLAG_PUSH = 8
DAMAGE_FLAG_WEAK = 10
DAMAGE_FLAG_GUARD_SMALL = 11
DAMAGE_FLAG_GUARD_LARGE = 12
DAMAGE_FLAG_GUARD_EXLARGE = 13
DAMAGE_FLAG_GUARD_BREAK = 14
DIRECTION_LEFT = 0
DIRECTION_RIGHT = 1
DIRECTION_FORWARD = 2
DIRECTION_BACK = 3
DIRECTION_FRONTRIGHT = 4
DIRECTION_FRONTLEFT = 5
FRONT_ADD = 0
BACK_ADD = 1
LEFT_ADD = 2
RIGHT_ADD = 3
FRONTUP_ADD = 4
FRONTDOWN_ADD = 5
DAMAGE_TYPE_DEATH = 2
DAMAGE_TYPE_GUARD = 3
DAMAGE_TYPE_PARRY = 5
DAMAGE_TYPE_DEATHIDLE = 8
DAMAGE_TYPE_WEAK_FRAME = 10
DAMAGE_TYPE_GUARDED_BOUND = 1000
DAMAGE_TYPE_GUARD_BREAK = 1001
DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 = 1008
DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 = 1009
DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 = 1010
DAMAGE_TYPE_PARRY_ENEMY1 = 1011
DAMAGE_TYPE_PARRY_ENEMY2 = 1012
DAMAGE_TYPE_PARRY_ENEMY3 = 1013
DAMAGE_TYPE_WALL_ENEMY1 = 1014
DAMAGE_TYPE_WALL_ENEMY2 = 1015
DAMAGE_TYPE_WALL_ENEMY3 = 1016
DAMAGE_TYPE_NONE = 99999
SP_DAMAGE_NONE = 0
SP_DAMAGE_MIMIC = 1
SP_DAMAGE_ITEM_PARRY = 2
SP_DAMAGE_FAT_BREAK = 3
DAMAGE_ELEMENT_FIRE = 2
DEATH_TYPE_DEFAULT = 0
DEATH_TYPE_FIRE = 1
DEATH_TYPE_WEAK = 2
DEATH_TYPE_BLAST = 3
DEATH_TYPE_FLING = 4
DEATH_TYPE_UPPER = 5
DEATH_TYPE_LAND_DEFAULT = 6
DEATH_TYPE_FIRE = 7
DEATH_TYPE_THROW_DEF = 8
DEATH_TYPE_LADDER = 9
DEATH_TYPE_LAND_UPWARD = 10
DEATH_TYPE_LAND_DOWNWARD = 11
FALL_DEFAULT = 0
FALL_UPWARD = 1
FALL_DOWNWARD = 2
FALL_LADDER = 3
ACTION_TYPE_PARRY_THROW = 3110
LADDER_REQUEST_UP = 7210
LADDER_REQUEST_DOWN = 7220
ACTION_TYPE_GUARD = 9910
ACTION_TYPE_PARRY = 9920
ANIME_ID_IDLE_DEFAULT = 0
ANIME_ID_TRANS_BATTLE_DEFAULT = 1020
ANIME_ID_TRANS_DEFAULT_BATTLE = 1040
ANIME_ID_HEATUP = 1500
ANIME_ID_MODE_CHANGE = 1600
ANIME_ID_IDLE_UNIQUE_TO_IDLE = 1700
ANIME_ID_LOSE_TARGET = 1810
ANIME_ID_WALK_BATTLE = 2000
ANIME_ID_WALK_GUARD = 2030
ANIME_ID_WALK_PARRY = 2040
ANIME_ID_RUN_BATTLE = 2100
ANIME_ID_RUN_GUARD = 2130
ANIME_ID_RUN_PARRY = 2140
ANIME_ID_WALK_DEFAULT = 2300
ANIME_ID_RUN_DEFAULT = 2310
ANIME_ID_ATTACK_BEGIN = 3000
ANIME_ID_ATTACK_END = 3199
ANIME_ID_ART_STANCE_BEGIN = 3200
ANIME_ID_ART_STANCE_END = 3299
ANIME_ID_PARRY_ATTACK = 4000
ANIME_ID_BRING_EST = 4600
ANIME_ID_TURN = 5000
ANIME_ID_STEP_BEGIN = 6000
ANIME_ID_STEP_END = 6003
ANIME_ID_FALLING_UPWARD = 7010
ANIME_ID_FALLING_DOWNWARD = 7020
ANIME_ID_LAND_HEAVY = 7401
ANIME_ID_DEATH_LAND_DEFAULT = 7600
ANIME_ID_DEATH_LAND_UPWARD = 7610
ANIME_ID_DEATH_LAND_DOWNWARD = 7620
ANIME_ID_DAMAGE_SMALL = 8000
ANIME_ID_DAMAGE_MIDDLE = 8010
ANIME_ID_DAMAGE_LARGE = 8020
ANIME_ID_DAMAGE_MINIMUM = 8030
ANIME_ID_DAMAGE_SMALL_BLOW = 8100
ANIME_ID_DAMAGE_LARGE_BLOW = 8101
ANIME_ID_DAMAGE_FLING = 8110
ANIME_ID_DAMAGE_PUSH = 8120
ANIME_ID_DAMAGE_UPPER = 8130
ANIME_ID_DAMAGE_WEAK = 8140
ANIME_ID_GUARD_DAMAGE_SMALL_LOW = 8201
ANIME_ID_GUARD_DAMAGE_LARGE_LOW = 8221
ANIME_ID_ATTACK_BOUND_ENEMY1 = 8300
ANIME_ID_ATTACK_BOUND_ENEMY2 = 8310
ANIME_ID_PARRY_DAMAGE_ENEMY1 = 8500
ANIME_ID_PARRY_DAMAGE_ENEMY2 = 8501
ANIME_ID_SPECIAL_DAMAGE_RANDOM = 8600
ANIME_ID_SA_BREAK = 8700
ANIME_ID_ADD_BLEND_FRONT = 9000
ANIME_ID_ADD_BLEND_BACK = 9001
ANIME_ID_ADD_BLEND_LEFT = 9002
ANIME_ID_ADD_BLEND_RIGHT = 9003
ANIME_ID_PART1_DAMAGE = 9100
ANIME_ID_PART9_DAMAGE = 9171
ANIME_ID_BLEND_DAMAGE_FIRE_SMALL = 9200
ANIME_ID_BLEND_DAMAGE_FIRE_MIDDLE = 9210
ANIME_ID_BLEND_DAMAGE_SMALL_FRONT = 9310
ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT = 9320
ANIME_ID_BLEND_DAMAGE_LARGE_FRONT = 9330
ANIME_ID_NO_ADD = 9500
ANIME_ID_DEATH_DEFAULT = 10000
ANIME_ID_DEATH_FIRE = 10010
ANIME_ID_DEATH_WEAK = 10030
ANIME_ID_DEATH_BLAST = 10040
ANIME_ID_DEATH_FLING = 10050
ANIME_ID_DEATH_UPPER = 10060
ANIME_ID_DEATH_VARIATION = 10100
ANIME_ID_THROW_DEF_BACKSTAB = 11000
ANIME_ID_DEATH_THROW_BACKSTAB = 11001
ANIME_ID_THROW_DEF_PARRY = 11010
ANIME_ID_DEATH_THROW_PARRY = 11011
ANIME_ID_DEATH_START_LADDER = 13370
ANIME_ID_EVENT_BEGIN = 20000
ANIME_ID_EVENT_END = 20019
SP_EFFECT_ENABLE_PARRY_THROW = 30
SP_EFFECT_SLEEP = 3150
SP_EFFECT_MAGGOT_MAN = 5700
SP_EFFECT_CRUCIFY_UNDEAD_A = 5701
SP_EFFECT_CRUCIFY_UNDEAD_B = 5702
SP_EFFECT_TINDALOS_SP_DAMAGE = 5703
SP_EFFECT_COBRA_ASSASSIN = 5704
SP_EFFECT_SANDWORM = 5705
SP_EFFECT_UNDEAD_DOG = 5706
SP_EFFECT_MOTHER_DORAGON = 5707
SP_EFFECT_GARGOYLE_AT_CASTLE = 5708
SP_EFFECT_GUNDA_UNDEAD = 5709
SP_EFFECT_FULL_ARMOR_BEAST = 5710
SP_EFFECT_TINDALOS_THROW_DEF = 5711
SP_EFFECT_SKELETON_KNIGHT = 5712
SP_EFFECT_HUNGRY_JACK = 5713
SP_EFFECT_ARISE_3 = 5714
SP_EFFECT_ARISE = 5715
SP_EFFECT_DLC_WolfM = 5716
SP_EFFECT_DLC_WolfS = 5717
SP_EFFECT_DLC_SnowLady = 5718
SP_EFFECT_DLC_HAE_TATAKI = 5719
SP_EFFECT_DLC_KARASU_MURABITO = 5720
SP_EFFECT_DLC_KARASUKISI_COUNTER_R = 5721
SP_EFFECT_DLC_KARASUKISI_COUNTER_L = 5722
SP_EFFECT_DLC_TALK_KARASUMURABITO = 5723
SP_EFFECT_DLC_TALK_ZOMBIKARASU = 5724
SP_EFFECT_DLC_WOLFKING = 5730
SP_EFFECT_DLC_BOSUMUSUME = 5740
SP_EFFECT_IGNORE_SPECIAL_DAMAGE = 5750
SP_EFFECT_IGNORE_SET_DIST_RATIO = 5800
SP_EFFECT_ART_STANCE = 5821
SP_EFFECT_SKELETON_NO_DEAD = 5830
SP_EFFECT_SKELETON_TMP_DEATH = 5831
SP_EFFECT_CURSED_TREE_LAND = 5840
SP_EFFECT_CURSED_TREE_DEAD = 5900
SP_EFFECT_SANDWORM_DEAD = 5901
SP_EFFECT_BLAST_SPIN_ON_DEATH = 5902
SP_EFFECT_POOR_UNDEAD_DEAD = 5903
SP_EFFECT_PILGRIM_UNDEAD_DEAD = 5904
SP_EFFECT_UNDEAD = 5905
SP_EFFECT_ROLLING_PUSH = 6000
SP_EFFECT_ROCK_LIZARD = 6010
SP_EFFECT_IGNORE_ROLLING_PUSH = 6020
SP_EFFECT_IGNORE_DEAD = 6021
SP_EFFECT_ZOMBIE_GUARDIAN = 6060
SP_EFFECT_HALLECK = 6070
SP_EFFECT_HALLECK_BREAK = 6071
SP_EFFECT_MIMIC = 11720
SP_EFFECT_DISABLE_SLEEP = 11721
SP_EFFECT_IGNORE_TURN45 = 10922
SP_EFFECT_KING_OF_STORM = 12060
SP_EFFECT_STORMRULER = 11420
SP_EFFECT_DLC_BOSSMUSUME_UNDEAD = 13132
SP_EFFECT_DLC_BOSSMUSUME_FATHERDEAD = 13133
SP_EFFECT_DLC_BOSSMUSUME_UNABLE_DEAD = 13134
SP_EFFECT_DLC_BOSSMUSUME_THROWDEAD = 13138
SP_EFFECT_DLC_BOSSMUSUME_PARRYDEAD = 13141
SP_EFFECT_DLC_BOSSMUSUME_MODE3 = 13143
SP_EFFECT_DLC_BOSSMUSUME_NORMALDEAD = 13147
SP_EFFECT_DLC2_NINGENSEINOMUSHI_SEITAI_UNABLEDEAD = 5027
SP_EFFECT_DLC2_NINGENSEINOMUSHI_SEITAI_DEAD = 16258
SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA = 16291
SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA_AOMUKEDEAD = 16292
SP_EFFECT_DLC2_MIYAKONOMOUJA_SEISYOKUSYA_IKARING = 16293
SP_EFFECT_ABADON_TALKNPC = 16337
SP_EFFECT_DLC2_ABADON_SMALL_3015to30000 = 16346
SP_EFFECT_DARK_DORAGON_3012to20 = 16212
SP_EFFECT_DARK_DORAGON_3027to20 = 16550
SP_EFFECT_CRIMSONBAT_BEAM = 15045
SP_EFFECT_CRIMSONBAT_BIT = 15046
SP_EFFECT_CRIMSONBAT = 15200
SP_EFFECT_CRIMSONBAT_HU = 15201
SP_EFFECT_CRIMSONBAT_HU_DONE = 15202
SP_EFFECT_CRIMSONBAT_THROWDEAD = 15203
SP_EFFECT_CRIMSONBAT_DEAD = 15204
SP_EFFECT_CRIMSONBAT_UNABLE_DEAD = 15205
SP_EFFECT_VARIANT_YUPA_NO_WEAKDAMAGE = 16192
SP_EFFECT_DLC2_BLACKKNIGHT = 5741
SP_EFFECT_VARIANT_YUPA = 5742
SP_EFFECT_BLUE_LIGHTNING = 5743
SP_EFFECT_TYPE_HOLY = 145
SP_EFFECT_TYPE_DISABLE_EST = 154
SP_EFFECT_TYPE_FALL_DEATH_INVALID = 266
DOWNSIDE = 0
UPSIDE = 1
ENEMY = 0
PLAYER = 1
CONFLICT_DIST_CHR = 0.30000001192092896
CONFLICT_DIST_START = 1.5
CONFLICT_DIST_COAST = 3
LADDER_COMMAND_INVALID = -1
LADDER_COMMAND_UP = 0
LADDER_COMMAND_DOWN = 1
LADDER_ACTION_INVALID = -1
LADDER_ACTION_START_BOTTOM = 0
LADDER_ACTION_START_TOP = 1
LADDER_ACTION_UP_RIGHT = 2
LADDER_ACTION_UP_LEFT = 3
LADDER_ACTION_DOWN_RIGHT = 4
LADDER_ACTION_DOWN_LEFT = 5
LADDER_ACTION_END_TOP = 6
LADDER_ACTION_END_BOTTOM = 7
LADDER_ACTION_IDLE_RIGHT = 8
LADDER_ACTION_IDLE_LEFT = 9
LADDER_ACTION_ATTACK_UP_RIGHT = 10
LADDER_ACTION_ATTACK_UP_LEFT = 11
LADDER_ACTION_ATTACK_DOWN_RIGHT = 12
LADDER_ACTION_ATTACK_DOWN_LEFT = 13
LADDER_ACTION_COAST_START_RIGHT = 14
LADDER_ACTION_COAST_RIGHT = 15
LADDER_ACTION_COAST_STOP_RIGHT = 16
LADDER_ACTION_COAST_START_LEFT = 17
LADDER_ACTION_COAST_LEFT = 18
LADDER_ACTION_COAST_STOP_LEFT = 19
LADDER_ACTION_COAST_LANDING = 20
LADDER_ACTION_SMALL_DAMAGE = 21
LADDER_ACTION_LARGE_DAMAGE = 22
LADDER_HAND_LEFT = 0
LADDER_HAND_RIGHT = 1
LADDER_ATTACK_STAMINA_THRESHOLD = 50
LADDER_DAMAGE_STAMINA_THREAHOLD = 80
LADDER_ATTACK_STAMINA_CONSUME = -25
LADDER_SMALL_DAMAGE_STAMINA_CONSUME = -50
LADDER_LARGE_DAMAGE_STAMINA_CONSUME = -70
HEIGHT_TRANS_TO_LAND = 2
HEIGHT_TRANS_TO_HEAVY_LAND = 5
HEIGHT_FORCE_DEATH = 60
ATTACK_DIR_FRONT = 0
ATTACK_DIR_UP = 1
ATTACK_DIR_DOWN = 2
ATTACK_DIR_LEFT = 3
ATTACK_DIR_RIGHT = 4
BEH_IDENTIFIER_ROLLING = 1
BEH_IDENTIFIER_ITEM_PARRY = 3
BEH_IDENTIFIER_FAT_BREAK = 6
BEH_IDENTIFIER_KICK = 7
BEH_IDENTIFIER_MAGMA = 9
move_table_battle = {
    {ANIME_ID_WALK_BATTLE, "W_WalkFrontBattle", MOVE_TYPE_WALK_FRONT}, 
    {ANIME_ID_WALK_BATTLE + 1, "W_WalkBackBattle", MOVE_TYPE_WALK_BACK}, 
    {ANIME_ID_WALK_BATTLE + 2, "W_WalkLeftBattle", MOVE_TYPE_WALK_LEFT}, 
    {ANIME_ID_WALK_BATTLE + 3, "W_WalkRightBattle", MOVE_TYPE_WALK_RIGHT}, 
    {ANIME_ID_RUN_BATTLE, "W_RunBattle", MOVE_TYPE_RUN}
}

move_table_default = {
    {ANIME_ID_WALK_DEFAULT, "W_WalkFrontDefault", MOVE_TYPE_WALK_FRONT}, 
    {ANIME_ID_WALK_BATTLE + 1, "W_WalkBackBattle", MOVE_TYPE_WALK_BACK}, 
    {ANIME_ID_WALK_BATTLE + 2, "W_WalkLeftBattle", MOVE_TYPE_WALK_LEFT}, 
    {ANIME_ID_WALK_BATTLE + 3, "W_WalkRightBattle", MOVE_TYPE_WALK_RIGHT}, 
    {ANIME_ID_RUN_DEFAULT, "W_RunDefault", MOVE_TYPE_RUN}
}

move_table_guard = {
    {ANIME_ID_WALK_GUARD, "W_GuardWalkFront", MOVE_TYPE_WALK_FRONT}, 
    {ANIME_ID_WALK_GUARD + 1, "W_GuardWalkBack", MOVE_TYPE_WALK_BACK}, 
    {ANIME_ID_WALK_GUARD + 2, "W_GuardWalkLeft", MOVE_TYPE_WALK_LEFT}, 
    {ANIME_ID_WALK_GUARD + 3, "W_GuardWalkRight", MOVE_TYPE_WALK_RIGHT}, 
    {ANIME_ID_RUN_GUARD, "W_GuardRun", MOVE_TYPE_RUN}
}

move_table_parry = {
    {ANIME_ID_WALK_PARRY, "W_ParryWalkFront", MOVE_TYPE_WALK_FRONT}, 
    {ANIME_ID_WALK_PARRY + 1, "W_ParryWalkBack", MOVE_TYPE_WALK_BACK}, 
    {ANIME_ID_WALK_PARRY + 2, "W_ParryWalkLeft", MOVE_TYPE_WALK_LEFT}, 
    {ANIME_ID_WALK_PARRY + 3, "W_ParryWalkRight", MOVE_TYPE_WALK_RIGHT}, 
    {ANIME_ID_RUN_PARRY, "W_ParryRun", MOVE_TYPE_RUN}
}

g_FrameCount = 0

------------------------
-- Conditions 
-- env( <condition>, <args> )
-- *<args> are optional
------------------------
IsGeneralAnimEnd = 0
IsAttackAnimEnd = 1
AnimIDOffset = 9
AdditiveBlendAnim = 10
AdditiveBlendAnimOfSlot = 11

IsAtkRequest = 100 -- args: <attack request index>
IsAtkReleaseRequest = 101
IsChainAtkRequest = 102
GetAtkDuration = 103
GetWeaponSwitchRequest = 104
GetCommandIDFromEvent = 105
GetAIActionType = 106
GetAIChainActionType = 107
GetChainEvadeRequest = 108
GetWeaponChangeRequest = 109
GetAnimIDFromMoveParam = 110
IsThereAnyAtkRequest = 111
IsThereAnyChainAtkRequest = 112
IsItemUseMenuOpening = 113
IsMagicUseMenuOpening = 114
IsItemUseMenuOpened = 115
IsMagicUseMenuOpened = 116
GetBlendAnimIDFromMoveParam = 117
GetAIChainStepType = 118
GetTransitionToSpecialStayAnimID = 119
GetAIAtkCancelType = 120
GetWeaponCancelType = 121 -- args: <hand index>
IsWeaponCancelPossible = 122 
GetAIDefenseCancelType = 123
GetAIVersusBackstabCancelType = 124

IsFalling = 200
IsLanding = 201
GetReceivedDamageType = 202
IsActiveActionValid = 203
GetActionEventNumber = 204
IsNormalDmgPassThroughDuringThrow = 205
IsThrowing = 206
GetWeaponSwitchState = 207
IsEquipmentSwitchPossible = 209
IsAnimCancelPossibleInAtkRelease = 210
IsEmergencyStopAnimPlaying = 211
GetLockRangeState = 212
GetLockAngleState = 213
IsAnimCancelPossibleInDamageHit = 214
IsChangeToScrapeAtk = 215
IsChangeToDeflectAtk = 216
IsChangeToAfterParrySuccess = 217
IsChangeFromNormalToBigAtk = 218
GetMovementType = 219
IsLargeAtkComboPossible = 220
IsMapActionPossible = 221
GetReceivedDamageDirection = 222
GetMapActionID = 223
GetFallHeight = 224
GetEquipWeaponCategory = 225 -- args: <hand index>
IsHoldingBow = 226
GetMagicAnimType = 227
WasNotLargeAtk = 228
IsBackAtkPossible = 229
IsAfterParryAtkPossible = 230
GetItemAnimType = 231
IsMagicUseable = 232 -- args: <hand index>, <unknown index>
IsItemUseable = 233
IsPrecisionShoot = 234
IsFireDamaged = 235
GetDamageLevel = 236
GetGuardLevelAction = 237
IsNewLeftHandAtkFromStay = 238
IsParryFromIdle = 239
IsGuardFromIdle = 240
IsNewLeftHandAtkFromAtkCancel = 241
IsParryFromAtkCancel = 242
IsGuardFromAtkCancel = 243
IsTiedUp = 244
IsOutOfAmmo = 245 -- args: <slot index> # 1 is left slot, 0 is right slot
IsUseCatLanding = 246
GetHoverMoveState = 247
IsTruelyLanding = 248
IsRightHandMagic = 249
IsChangeToSpecialStayAnim = 250
GetSpecialStayAnimID = 251
AcquireSpecialDamageAnimationID = 252
IsRunTurnAnimPlaying = 253
IsGenerateAction = 254
GetSpecialStayCancelAnimID = 255
HasReceivedAnyDamage = 256
GetMoveAnimParamID = 257
GetGuardLevel = 258
IsRequestTurnAnimStart = 259
IsTurningWithAnim = 260
IsFlying = 261
IsAbilityInsufficient = 262 -- args: <hand index>
GetEquipWeightRatioForFalling = 263
GetFlightMotionState = 264
GetIsWeakPoint = 265
GetMoveAnimBlendRatio = 266
GetLadderActionState = 267
IsInDisguise = 268
IsCoopWait = 269
IsCoop = 270
IsSpecialTransitionPossible = 271
GetLandingAnimBlendRatio = 272
GetThrowAnimID = 273
DidOpponentDieFromThrow = 274
HasThrowEnded = 275
IsThrowSelfDeath = 276
IsThrowSuccess = 277
GetGuardMotionCategory = 278 -- args: <hand index>
IsBeingThrown = 279
IsSelfThrow = 280
IsThrowDeathState = 281
GetNewLockState = 282
IsOnLadder = 283
GetPhysicalAttribute = 284
GetSpecialAttribute = 285
GetSpecialStayDeathAnimID = 286
HasReceivedAnyDamage_AnimEnd = 287
EggGrowth_IsHeadScratch = 288
EggGrowth_IsBecomeEggHead = 289
IsStop = 290
IsSomeoneOnLadder = 291 -- args: <check distance>, <unknown index>
IsSomeoneUnderLadder = 292 -- args: <check distance>, <unknown index>
GetLadderHandState = 293
DoesLadderHaveCharacters = 294 -- args: <check distance>, <unknown index>, <unknown index>
IsLadderRightHandStayState = 295
IsDescendingToFloor = 296
IsInputDirectionMatch = 297
IsSpecialTransition2Possible = 298
IsVersusDivineDamage = 299

IsGeneralAnimCancelPossible = 300
GetEventEzStateFlag = 301 -- args: <EzState command id>
IsLadderEventEnd = 302
IsReachBottomOfLadder = 303
IsReachTopOfLadder = 304
GetStateChangeType = 305 -- args: <state change id>
IsOnLastRungOfLadder = 306
GetWeaponDurability = 311
IsWeaponBroken = 312
IsAnimEndBySkillCancel = 313
EggGrowth_IsBecomeEgghead_SecondStage = 314
IsHamariFallDeath = 315 -- args: <unknown index>
IsClient = 316
IsSlope = 317
IsSwitchState = 318
IsPressUpKey = 319
IsSpecialTurning = 320
GetIntValueForTest = 321
IsObjActInterpolatedMotion = 322
GetObjActTargetDirection = 323
GetObjActRemainingInterpolateTime = 324
IsGap = 325
GetWeaponID = 326 -- args: <hand index>
IsMovingLaterally = 327
IsNet = 328
HasBrokenSA = 329
IsEmergencyQuickTurnActivated = 330
IsDoubleChantPossible = 331
IsAnimOver = 332
ObtainedDT = 333
GetBehaviorID = 334 -- args: <hand index>
IsTwoHandPossible = 335 -- args: <hand index>
IsPartDamageAdditiveBlendInvalid = 336
IsThrowPosRealign = 337
GetBoltLoadingState = 338 -- args: <slot index>
IsAnimEnd = 339 -- args: <unknown index>
IsTwinSwords = 340 -- args: <hand index>
GetTurnAngleForDelayedTurn = 341
GetThrowDefenseCount = 342
IsEmergencyEvasionPossible = 343 -- args: <unknown index>
HasEnoughArtsPoints = 344 -- args: <button index>, <hand index>
GetEquipWeaponSpecialCategoryNumber = 345 -- args: <hand index>
CheckForEventAnimPlaybackRequest = 346
IsFemale = 347
GetDelayTurnAngleDifference = 348
IsDamageMotionOff = 349
HasReachedStatsNeededForWeapon = 350 -- args: <hand index>  -- Checks for the attainmentWepStatus fields in EquipParamWeapon
UpperArmControlOuterAngle = 351
UpperArmControlTopAndBottomAngle = 352
CompleteLadderSlideDown = 353
GetLadderRungCount = 354
GetNumberOfRungsBelowOnLadder = 355
GetBowAndArrowSlot = 356
GetWeaponStorageSpotType = 357 -- args: <hand index>
GetStayAnimCategory = 358
GetWeaponSwitchStatus = 359
IsEquipmentMenuOpen = 360
GetRemainingArrowCount = 361

GetHP = 1000
GetStamina = 1001
IsGhost = 1002
GetRandomInt = 1003
GetRandomFloat = 1004
IsUnableToDie = 1005
IsResurrectionPossible = 1006
IsCOMPlayer = 1007
GetAITargetAwareState = 1008
IsAIChangeToAwareState = 1009
GetAITargetAwareStatePreviousFrame = 1010

GetTestDamageAnimID = 1100
IsInvincibleDebugMode = 1101
WasGameLaunchedInPGTestMode = 1102
IsTiltingStick = 1103
GetGestureRequestNumber = 1104
IsStayState = 1105
ActionRequest = 1106 -- args: <action arm index>
ActionCancelRequest = 1107 -- args: <action arm index>
ActionDuration = 1108 -- args: <action arm index>
HasActionRequest = 1109
MovementRequest = 1110
MovementRequestDuration = 1111
HasThrowRequest = 1112
IsGuardCancelPossible = 1113
DoesAnimExist = 1114 -- args: <anim id>, *<anim id>
GetAIMovementType = 1115
GetSpEffectID = 1116
IsConversationEnd = 1117
IsLocked = 1118
GetAtkDirection = 1119
GetPartGroup = 1120
GetKnockbackDistance = 1121

IsMoveCancelPossible = 2000
GetSpecialMovementType = 2002
GetGeneralTAEFlag = 2003 -- args: <flag>
IsSwingHitTarget = 2004
GetCeremonyState = 2005
GetSuccessiveGuardCount = 2006
GetMinLuck = 2007
GetAccumulatedLuck = 2008
GetMaxLuck = 2009
GetMaxStamina = 2010
GetGeneralMSBParameter = 2011
IsHitWall = 2012
GetSafetyDirection = 2013
IsInCeremony = 2014
IsDoingCorpseCarryKeyframe = 2015
GetFP = 2016
IsCeremonyComplete = 2017
IsCeremonyInterrupt = 2018

------------------------
-- Commands
-- act( <command>, <args> )
-- *<args> are optional
------------------------
ChangeGeneralAnim = 0
ChangeUpperBodyAnim = 1
ChangeStayAnim = 2
ChangeGeneralAnimCategorized = 3 -- args: <anim category>, <anim id>, <layer index>, <blend>, <isLoop>
ChangeUpperBodyAnimCategorized = 4
ChangeGeneralAnimAdditiveCategorized = 5
ChangeUpperBodyAnimAdditiveCategorized = 6
ChangeGeneralAnimCategorizedMatchPlaybackTime = 7
ChangeUpperBodyAnimCategorizedMatchPlaybackTime = 8
SetAnimIDOffset = 9
SetAdditiveBlendAnimation = 10
SetAdditiveBlendAnimationSlotted = 11
ChangeBlendAnimationCategorized = 12
ChangeUpperAndLowerBodySyncedAnimCategorized = 13

SetActiveActionState = 100
SwitchMotion = 101 -- args: <bool> 
SetAllowedThrowAttackType = 102 -- args: <index> # ENUM: THROW_STATE
SetAllowedThrowDefenseType = 103 -- args: <index> # ENUM: THROW_STATE
SwitchEquippedWeapon = 104
SetReadyForAtkFinish = 105
SetEquipmentChangeable = 106
SetUnableToFall = 107
SendMessageIDToEvents = 108 -- args: <event call>
SetAttackType = 109 -- args: <index> # -1
SetStaminaRecoveryDisabled = 110
SetAIBusyDoingAction = 111
BowTurn = 112
SetBowStance = 113
SetPreciseAimMode = 114
SetSpecialMovement = 115
SetIsWeaponChanging = 116
SetIsItemInUse = 117 -- args: <bool>
SetIsMagicInUse = 118 -- args: <bool>
SetHoverState = 119
RemoveBinoculars = 120
ChangeToSpecialStay = 121
SetIsHeadTurnPossible = 122
OpenMenuWhenUsingItem = 123
OpenMenuWhenUsingMagic = 124 -- args: <action arm index>
BlowDamageTurn = 125
SetDeathStay = 126 -- args: <bool> # TRUE, FALSE
CloseMenuWhenUsingItem = 127
CloseMenuWhenUsingMagic = 128
DisallowAdditiveTurning = 129 -- args: <bool>
ChangeFlightStatus = 130
ShowFixedYAxisDirectionDisplay = 131
WhiffPossibility = 132
SetLadderActionState = 133 -- args: <index>
SetInsufficientStrengthAnimID = 134
ForceCancelThrowAnim = 135
SetThrowState = 136 -- args: <index> # ENUM: THROW_TYPE
StartSlidingDownLadder = 137
SetIsEventActionPossible = 138 -- args: <bool>
RequestThrowAnimInterrupt = 139
SetHandStateOfLadder = 140
SetDamageAnimType = 141 -- args: <index> # ENUM: DAMAGE_FLAG
DownwardSlideTurn = 142 -- args: <index>
InterruptAttack = 143
SkyDeathWarp = 144
ClearSlopeInfo = 145
ReceiveStateInput = 146
SetIsEquipmentChangeableFromMenu = 147
SetHavokVariable = 148 -- args: <string>, <value>
AimAtSelfPosition = 149
SetIsItemAnimationPlaying = 150
DoAIReplanningAtCancelTiming = 151
DenyEventAnimPlaybackRequest = 152
InvokeBackstab = 153
WeaponParameterReference = 154 -- args: <hand index>
AINotifyAttackType = 155 -- args: <index>
SetAutoCaptureTarget = 156
ClearAutoCaptureTarget = 157
RequestAIReplanning = 158
TurnTowardAttacker = 159
SetThrowPossibilityState_Attacker = 160 -- args: <index>
SetThrowPossibilityState_Defender = 161 -- args: <index>
MarkOfGreedyPersonSlipDamageDisable = 162

StateIdentifier = 200

ChangeHP = 1000 -- args: <value>
ChangeStamina = 1001 -- args: <value> # ENUM: STAMINA_REDUCE

SyncAtInit_Active = 1100
SyncAtInit_Passive = 1101

SetMovementScaleMult = 2001 -- args: <value>
AddSpEffect = 2002 -- args: <id>
SetFastStealthThrowEnabled = 2003
SetTurnSpeed = 2004 -- args: <degrees>
SetCeremonyState = 2005
SetDamageMotionBlendRatio = 2006 -- args: <value>
SetForceTurnTarget = 2007
ForceTurn = 2008
SpecialTurn = 2009
SetInSpecialGuard = 2010
SetWeaponCancelType = 2011 -- args: <index>
SetIsPreciseShootingPossible = 2012
ChooseBowAndArrowSlot = 2013 -- args: <slot index> # 0, 1
Set4DirectionMovementThreshold = 2014 -- args: <front right angle>, <front left angle>, <back left angle>, <back right angle> #
LockonSystemUnableToTurnAngle = 2015 -- args: <angle>, <angle>
ReserveArtsPointsUse = 2016 -- args: <button index>, <hand index>
SetArtsPointFEDisplayState = 2017 -- args: <value> # 0, 1
LockonFixedAngleCancel = 2018
TurnToLockonTargetImmediately = 2019 -- args: *<value>
SetSpecialInterpolation = 2020 -- args: <value>, <bool>
LadderSlideDownCancel = 2021
DisableMagicIDSwitching = 2022
DisableToolIDSwitching = 2023
UseItemDecision = 2024

DebugLogOutput = 9000
Test_SpEffectDelete = 9001
Test_SpEffectTypeSpecifyDelete = 9002
MarkerStart = 9003
MarkerEnd = 9004

Wait = 9100
ResetInputQueue = 9101
SetIsEventAnim = 9102
SetAIAttackState = 9103 -- args: <index>
SetIsTurnAnimInProgress = 9104
SetTurnAnimCorrectionRate = 9105 -- args: <degrees>

-- Japanese Strings
ClearAutoLockOnTarget = "自動捕捉対象クリア"
AutoLockOnTargetSetting = "自動捕捉対象設定"
PrecisionShootPossible = "精密射撃可能か"
AIReplanRequest = "AIへのリプランニング要求"
DisableMarkOfDevourer = "貪欲者の印スリップダメージ無効" -- Probably 162

------------------------------------------
-- Must be last for the global variables to be read
------------------------------------------
global = {}
function dummy()
end

global["__index"] = function (table, element)
    return dummy
end

setmetatable(_G, global)
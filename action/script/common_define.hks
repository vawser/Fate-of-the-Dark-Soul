------------------------------------------
-- Common: Variables
------------------------------------------
TRUE = 1
FALSE = 0
INVALID = -1
PLAYER_STATE_IDLE = 0
PLAYER_STATE_MOVE = 1
STAMINA_MINIMUM = 0
SPEED_ENABLE_JUMP = 1.600000023841858

-- Land Index
LAND_DEFAULT = 0
LAND_MIDDLE = 1
LAND_HEAVY = 2
LAND_JUMP = 6

-- Fall Index
FALL_DEFAULT = 0
FALL_ATTACK = 1
FALL_LADDER = 2
FALL_FACEUP = 3
FALL_FACEDOWN = 4

-- Fall Type Index
FALL_TYPE_DEFAULT = 0
FALL_TYPE_JUMP = 1
FALL_TYPE_FORCE = 2
FALL_TYPE_FORCE_LOOP = 3
FALL_TYPE_FACEUP = 4
FALL_TYPE_FACEUP_LOOP = 5
FALL_TYPE_FACEDOWN = 6
FALL_TYPE_FACEDOWN_LOOP = 7

-- Evasion Type Index
EVASION_ROLLING = 0
EVASION_JUMP = 1
EVASION_BACKSTEP = 2

-- Weight Index
WEIGHT_LIGHT = 0
WEIGHT_NORMAL = 5
WEIGHT_HEAVY = 10
WEIGHT_OVERWEIGHT = 15
WEIGHT_SUPERLIGHT = 16

-- Move Weight Index
MOVE_WEIGHT_LIGHT = 0
MOVE_WEIGHT_NORMAL = 1
MOVE_WEIGHT_HEAVY = 2
MOVE_WEIGHT_SUPERLIGHT = 3
MOVE_WEIGHT_OVERWEIGHT = 4

-- Evasion Weight Index
EVASION_WEIGHT_INDEX_SUPERLIGHT = 0
EVASION_WEIGHT_INDEX_LIGHT = 1
EVASION_WEIGHT_INDEX_MEDIUM = 2
EVASION_WEIGHT_INDEX_HEAVY = 3
EVASION_WEIGHT_INDEX_OVERWEIGHT = 4

-- Blend Index
ALLBODY = 0
UPPER = 1
LOWER = 2
LOWER_IDLE = 0
LOWER_MOVE = 1
LOWER_TURN = 2
LOWER_END_TURN = 3

-- Quick Type Index
QUICKTYPE_NORMAL = 0
QUICKTYPE_DASH = 1
QUICKTYPE_ROLLING = 2
QUICKTYPE_ATTACK = 3
QUICKTYPE_COMBO = 4

-- Emergency Step Index
ESTEP_NONE = 0
ESTEP_DOWN = 1
ESTEP_UP = 2

-- Guard Status
TO_GUARDON = 1

-- Action Arm
ACTION_ARM_R1 = 0 -- R1
ACTION_ARM_R2 = 1 -- R2
ACTION_ARM_L1 = 2 -- L1
ACTION_ARM_L2 = 3 -- L2
ACTION_ARM_ACTION = 4 -- 
ACTION_ARM_SP_MOVE = 5 -- Circle
ACTION_ARM_CHANGE_STYLE = 6 -- Triangle
ACTION_ARM_USE_ITEM = 7 -- Square
ACTION_ARM_SWITCH_FORM = 8 -- 
ACTION_ARM_CHANGE_WEAPON_R = 9 -- Right Arrow
ACTION_ARM_CHANGE_WEAPON_L = 10 -- Left Arrow
ACTION_ARM_CHANGE_ITEM = 11 -- 
ACTION_ARM_BACKSTEP = 12 -- No Movement + Circle
ACTION_ARM_ROLLING = 13 -- Movement + Circle
ACTION_ARM_JUMP = 14 -- Movement + L3
ACTION_ARM_MAGIC_R = 15 -- R1 + Cast-enabled Weapon
ACTION_ARM_MAGIC_L = 16 -- L1 + Cast-enabled Weapon
ACTION_ARM_GESTURE = 17 -- Gesture
ACTION_ARM_LADDERUP = 18 -- 
ACTION_ARM_LADDERDOWN = 19 -- 
ACTION_ARM_GUARD = 20 -- 
ACTION_ARM_EMERGENCYSTEP = 21 -- 
ACTION_ARM_LIGHT_KICK = 22 -- Forward + R1
ACTION_ARM_HEAVY_KICK = 23 -- Forward + R2
ACTION_ARM_CHANGE_STYLE_LEFT = 24 -- 

-- Item Index
ITEM_RECOVER = 0
ITEM_WEAPON_ENCHANT = 1
ITEM_THROW_KNIFE = 2
ITEM_THROW_BOTTLE = 3
ITEM_MEGANE = 4
ITEM_REPAIR = 5
ITEM_PRAY = 6
ITEM_TRAP = 7
ITEM_MESSAGE = 8
ITEM_SOUL = 9
ITEM_DRINK = 10
ITEM_DRAGONHEAD = 11
ITEM_DRAGONFULL = 12
ITEM_PRAY2 = 13
ITEM_SHOCK_WAVE = 14
ITEM_QUICK_WEAPON_ENCHANT = 16
ITEM_QUICK_THROW_KNIFE = 17
ITEM_QUICK_THROW_BOTTLE = 18
ITEM_DRINK_MP = 19
ITEM_BACK_BOTTLE = 20
ITEM_DRINK_SAKE = 21
ITEM_CHAMELEON = 22
ITEM_DRAGONHEADLVL2 = 23
ITEM_DRAGONFULLLVL2 = 24
ITEM_OLDMONK = 25
ITEM_QUICK_THROW_HOMINGKNIFE = 26
ITEM_NO_DRINK = 254
ITEM_INVALID = 255

-- Magic Index
MAGIC_REQUEST_ENBULLET = 0
MAGIC_REQUEST_WEAPON_ENCHANT = 1
MAGIC_REQUEST_SELF_ENCHANT = 2
MAGIC_REQUEST_PRAY = 3
MAGIC_REQUEST_PRAY_BRO = 4
MAGIC_REQUEST_FLAME_RADIATION = 5
MAGIC_REQUEST_SELF_FLAME_ENCHANT = 6
MAGIC_REQUEST_DRAIN = 7
MAGIC_REQUEST_FLAME_NEAR = 8
MAGIC_REQUEST_CLOUD = 9
MAGIC_REQUEST_SPARK = 10
MAGIC_REQUEST_CHARM = 11
MAGIC_REQUEST_IMPACT = 12
MAGIC_REQUEST_CHAMELEON = 13
MAGIC_REQUEST_TRANSFORM = 14
MAGIC_REQUEST_WEAPON_ENCHANT2 = 15
MAGIC_REQUEST_SUMMON = 16
MAGIC_REQUEST_SHIELD_ENCHANT = 17
MAGIC_REQUEST_FORCE = 18
MAGIC_REQUEST_THUNDER = 19
MAGIC_REQUEST_ENVIRONMENT = 20
MAGIC_REQUEST_BREATH = 21
MAGIC_REQUEST_ENBULLET2 = 22
MAGIC_REQUEST_FLAMETHROWER = 23
MAGIC_REQUEST_WHIP = 24
MAGIC_REQUEST_SLASH = 25
MAGIC_REQUEST_PRAYHOLD = 26
MAGIC_REQUEST_STANDINGPRAYHOLD = 27
MAGIC_REQUEST_AOEPRAYHOLD = 28
MAGIC_REQUEST_QUICKENBULLET = 29
MAGIC_REQUEST_QUICKSLASH = 30
MAGIC_REQUEST_BEAM_CANNON = 31
MAGIC_REQUEST_FLAME_BACKHAND = 32
MAGIC_REQUEST_FLAME_GRAB = 33
MAGIC_REQUEST_CRUSH = 34
MAGIC_REQUEST_MIRACLE_RADIATION = 35
MAGIC_REQUEST_LIGHTNING_ROD = 36
MAGIC_REQUEST_CHOP = 37
MAGIC_REQUEST_TRAP = 38
MAGIC_REQUEST_WRATH = 39
MAGIC_REQUEST_MACHINEGUN = 40
MAGIC_REQUEST_STRONGENBULLET = 41
MAGIC_REQUEST_FAST_SPARK = 42
MAGIC_REQUEST_FAST_FLAME_RADIATION = 43
MAGIC_REQUEST_SCYTHE = 44
MAGIC_REQUEST_HOLY_SPARK = 45
MAGIC_REQUEST_SLASHHOLD = 46
MAGIC_REQUEST_BIT = 47
MAGIC_REQUEST_CHAKRAM = 48
MAGIC_REQUEST_BOW = 49
MAGIC_REQUEST_FAN = 50
MAGIC_REQUEST_INVALID = 254
MAGIC_REQUEST_NOTHING = 255

AttackMagicIndex = {MAGIC_REQUEST_ENBULLET, MAGIC_REQUEST_FLAME_RADIATION, MAGIC_REQUEST_DRAIN, MAGIC_REQUEST_FLAME_NEAR, MAGIC_REQUEST_SPARK, MAGIC_REQUEST_IMPACT, MAGIC_REQUEST_FORCE, MAGIC_REQUEST_THUNDER, MAGIC_REQUEST_BREATH, MAGIC_REQUEST_ENBULLET2, MAGIC_REQUEST_FLAMETHROWER, MAGIC_REQUEST_WHIP, MAGIC_REQUEST_SLASH, MAGIC_REQUEST_QUICKENBULLET, MAGIC_REQUEST_QUICKSLASH, MAGIC_REQUEST_BEAM_CANNON, MAGIC_REQUEST_FLAME_BACKHAND, MAGIC_REQUEST_FLAME_GRAB, MAGIC_REQUEST_CRUSH, MAGIC_REQUEST_LIGHTNING_ROD, MAGIC_REQUEST_CHOP, MAGIC_REQUEST_WRATH, MAGIC_REQUEST_MACHINEGUN, MAGIC_REQUEST_STRONGENBULLET}

-- Ladder Action
LADDER_ACTION_INVALID = -1
LADDER_ACTION_START_BOTTOM = 0
LADDER_ACTION_START_TOP = 1
LADDER_ACTION_UP_RIGHT = 2
LADDER_ACTION_UP_LEFT = 3
LADDER_ACTION_DOWN_RIGHT = 4
LADDER_ACTION_DOWN_LEFT = 5
LADDER_ACTION_END_TOP = 6
LADDER_ACTION_END_BOTTOM = 7
LADDER_ACTION_IDLE_RIGHT = 8
LADDER_ACTION_IDLE_LEFT = 9
LADDER_ACTION_ATTACK_UP_RIGHT = 10
LADDER_ACTION_ATTACK_UP_LEFT = 11
LADDER_ACTION_ATTACK_DOWN_RIGHT = 12
LADDER_ACTION_ATTACK_DOWN_LEFT = 13
LADDER_ACTION_COAST_START = 14
LADDER_ACTION_COAST_RIGHT = 15
LADDER_ACTION_COAST_STOP = 16
LADDER_ACTION_COAST_LEFT = 18
LADDER_ACTION_COAST_LANDING = 20
LADDER_ACTION_DAMAGE_SMALL = 21
LADDER_ACTION_DAMAGE_LARGE = 22

-- Ladder Call
LADDER_CALL_UP = 0
LADDER_CALL_DOWN = 1

-- Hand State
HAND_STATE_RIGHT = 0
HAND_STATE_LEFT = 1

-- Ladder Event
LADDER_EVENT_COMMAND_UP = 2
LADDER_EVENT_COMMAND_DOWN = 3
LADDER_EVENT_COMMAND_END_TOP = 4
LADDER_EVENT_COMMAND_END_BOTTOM = 5
LADDER_EVENT_COMMAND_EXIT = 10000
LADDER_UP_CHECK_DIST = 0.5
LADDER_DOWN_CHECK_DIST = 0.30000001192092896
LADDER_START_CHECK_DIST = 1.5
LADDER_JUMP_SP_RELEASED = 0
LADDER_JUMP_WHEN_RELEASE = 1
LADDER_JUMP_INVALID = 2

-- Throe Type
THROW_TYPE_DEATH = 6
THROW_TYPE_INVALID = 0

-- Hand Position
HAND_LEFT = 0
HAND_RIGHT = 1
HAND_LEFT_BOTH = 2
HAND_RIGHT_BOTH = 3
HAND_BOTH = 4

-- 
GEN_TRANS_LEFT = 1
GEN_TRANS_RIGHT = 2

-- Weapon Change Request
WEAPON_CHANGE_REQUEST_INVALID = -1
WEAPON_CHANGE_REQUEST_RIGHT_WAIST = 0
WEAPON_CHANGE_REQUEST_RIGHT_BACK = 1
WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER = 2
WEAPON_CHANGE_REQUEST_RIGHT_SPEAR = 3
WEAPON_CHANGE_REQUEST_LEFT_WAIST = 4
WEAPON_CHANGE_REQUEST_LEFT_BACK = 5
WEAPON_CHANGE_REQUEST_LEFT_SHOULDER = 6
WEAPON_CHANGE_REQUEST_LEFT_SPEAR = 7

-- 
LEFT_TO_WAIST = 0
LEFT_TO_BACK = 1
LEFT_TO_SHOULDER = 2
LEFT_TO_SPEAR = 3
BOTH_TO_WAIST = 4
BOTH_TO_BACK = 5
BOTH_TO_SHOULDER = 6
RIGHT_TO_WAIST = 7
RIGHT_TO_BACK = 8
RIGHT_TO_SHOULDER = 9
RIGHT_TO_SPEAR = 10
BOTHRIGHT_TO_WAIST = 11
BOTHRIGHT_TO_BACK = 12
BOTHRIGHT_TO_SHOULDER = 13
SINGLELEFT_TO_WAIST = 14
SINGLELEFT_TO_BACK = 15
SINGLELEFT_TO_SHOULDER = 16
SINGLELEFT_TO_SPEAR = 17
LEFT_FROM_WAIST = 0
LEFT_FROM_BACK = 1
LEFT_FROM_SHOULDER = 2
LEFT_FROM_SPEAR = 3
BOTH_FROM_ALL = 4
RIGHT_FROM_WAIST = 5
RIGHT_FROM_BACK = 6
RIGHT_FROM_SHOULDER = 7
RIGHT_FROM_SPEAR = 8
BOTHLEFT_FROM_ALL = 9

-- Weapon Category
WEAPON_CATEGORY_SHORT_SWORD = 20
WEAPON_CATEGORY_STRAIGHT_SWORD = 23
WEAPON_CATEGORY_LARGE_SWORD = 25
WEAPON_CATEGORY_EXTRALARGE_SWORD = 26
WEAPON_CATEGORY_RAPIER = 27
WEAPON_CATEGORY_CURVEDSWORD = 28
WEAPON_CATEGORY_KATANA = 29
WEAPON_CATEGORY_SPEAR = 36
WEAPON_CATEGORY_HALBERD = 38
WEAPON_CATEGORY_STAFF = 41
WEAPON_CATEGORY_FIST = 42
WEAPON_CATEGORY_FIST_CUT = 43
WEAPON_CATEGORY_SMALL_ARROW = 44
WEAPON_CATEGORY_LARGE_ARROW = 45
WEAPON_CATEGORY_CROSSBOW = 46
WEAPON_CATEGORY_LARGE_SHIELD = 47
WEAPON_CATEGORY_SMALL_SHIELD = 48
WEAPON_CATEGORY_TORCH = 49
WeaponCategoryID = {{20, TRUE, TRUE}, {21, TRUE, TRUE}, {22, TRUE, TRUE}, {23, TRUE, TRUE}, {24, TRUE, TRUE}, {25, TRUE, TRUE}, {26, TRUE, TRUE}, {27, TRUE, TRUE}, {28, TRUE, TRUE}, {29, TRUE, TRUE}, {30, TRUE, TRUE}, {31, TRUE, TRUE}, {32, TRUE, TRUE}, {33, TRUE, TRUE}, {34, TRUE, TRUE}, {35, TRUE, TRUE}, {36, TRUE, TRUE}, {37, TRUE, TRUE}, {38, TRUE, TRUE}, {39, TRUE, TRUE}, {40, TRUE, TRUE}, {41, TRUE, TRUE}, {42, FALSE, FALSE}, {43, FALSE, FALSE}, {44, FALSE, FALSE}, {45, FALSE, FALSE}, {46, FALSE, FALSE}, {47, TRUE, TRUE}, {48, TRUE, TRUE}, {49, TRUE, TRUE}}
ArmTwistWeaponCategory = {{999, 0, 0, 0, 0}}

-- Damage Type
DAMAGE_TYPE_DEATH = 2
DAMAGE_TYPE_GUARD = 3
DAMAGE_TYPE_EVENT = 4
DAMAGE_TYPE_PARRY = 5
DAMAGE_TYPE_DEATH_FALLING = 6
DAMAGE_TYPE_DEATH_RECOVER = 7
DAMAGE_TYPE_DEATH_IDLE = 8
DAMAGE_TYPE_DEATH_AIR = 9
DAMAGE_TYPE_WEAK_POINT = 10
DAMAGE_TYPE_GUARDED = 1000
DAMAGE_TYPE_GUARDBREAK = 1001
DAMAGE_TYPE_BACK = 1002
DAMAGE_TYPE_GUARDED_LEFT = 1003
DAMAGE_TYPE_GUARDBREAK_BLAST = 1004
DAMAGE_TYPE_GUARDBREAK_FLING = 1005
DAMAGE_TYPE_WALL_RIGHT = 1006
DAMAGE_TYPE_WALL_LEFT = 1007
DAMAGE_TYPE_INVALID = 99999

-- Damage Level
DAMAGE_LEVEL_NONE = 0
DAMAGE_LEVEL_SMALL = 1
DAMAGE_LEVEL_MIDDLE = 2
DAMAGE_LEVEL_LARGE = 3
DAMAGE_LEVEL_EXLARGE = 4
DAMAGE_LEVEL_PUSH = 5
DAMAGE_LEVEL_FLING = 6
DAMAGE_LEVEL_SMALL_BLOW = 7
DAMAGE_LEVEL_MINIMUM = 8
DAMAGE_LEVEL_UPPER = 9
DAMAGE_LEVEL_EX_BLAST = 10
DAMAGE_LEVEL_BREATH = 11

-- Attack Direction
ATTACK_DIR_FRONT = 0
ATTACK_DIR_UP = 1
ATTACK_DIR_DOWN = 2
ATTACK_DIR_LEFT = 3
ATTACK_DIR_RIGHT = 4

-- Damage Direction
DAMAGE_DIR_LEFT = 0
DAMAGE_DIR_RIGHT = 1
DAMAGE_DIR_FRONT = 2
DAMAGE_DIR_BACK = 3

-- Death Type
DEATH_TYPE_COMMON = 0
DEATH_TYPE_COMMON_BACK = 1
DEATH_TYPE_BLAST = 2
DEATH_TYPE_WEAK = 3
DEATH_TYPE_FLING = 4
DEATH_TYPE_LAND = 5
DEATH_TYPE_STONE = 6
DEATH_TYPE_UPPER = 7
DEATH_TYPE_POISON = 8
DEATH_TYPE_LAND_LOW = 9
DEATH_TYPE_TAINT = 10
DEATH_TYPE_LAND_FACEUP = 11
DEATH_TYPE_LAND_FACEDOWN = 12
DEATH_TYPE_SPECIAL_UPPER = 13

-- Condition Type
CONDITION_TYPE_DRAGONHEAD = 96
CONDITION_TYPE_CURSE = 116
CONDITION_TYPE_STONE = 117
CONDITION_TYPE_CRYSTAL = 136
CONDITION_TYPE_UNDEAD = 143
CONDITION_TYPE_FAKE_DEATH = 144
CONDITION_TYPE_SAINT = 146
CONDITION_TYPE_NO_EST = 154
CONDITION_TYPE_DRAGONFULL = 167
CONDITION_TYPE_EGG = 192
CONDITION_TYPE_COLLUSIUM = 233
CONDITION_TYPE_TAINT = 260
CONDITION_TYPE_TAINTDEATH = 268
CONDITION_TYPE_GRAVITY_WEAK = 286
CONDITION_TYPE_GRAVITY_MEDIUM = 287

-- Damage Flag
DAMAGE_FLAG_MINIMUM = 0
DAMAGE_FLAG_SMALL = 1
DAMAGE_FLAG_MEDIUM = 2
DAMAGE_FLAG_LARGE = 3
DAMAGE_FLAG_SMALL_BLOW = 4
DAMAGE_FLAG_LARGE_BLOW = 5
DAMAGE_FLAG_FLING = 6
DAMAGE_FLAG_BLAST = 7
DAMAGE_FLAG_PUSH = 8
DAMAGE_FLAG_BREATH = 9
DAMAGE_FLAG_WEAK = 10
DAMAGE_FLAG_GUARD_SMALL = 11
DAMAGE_FLAG_GUARD_LARGE = 12
DAMAGE_FLAG_GUARD_EXLARGE = 13
DAMAGE_FLAG_GUARD_BREAK = 14

-- Attack Request
ATTACK_REQUEST_ROLLING = 1000
ATTACK_REQUEST_BACKSTEP = 1001
ATTACK_REQUEST_JUMP = 1002
ATTACK_REQUEST_EMERGENCYSTEP = 1003
ATTACK_REQUEST_INVALID = -1
ATTACK_REQUEST_RIGHT_LIGHT = 0
ATTACK_REQUEST_RIGHT_HEAVY = 1
ATTACK_REQUEST_BOTH_LIGHT = 2
ATTACK_REQUEST_BOTH_LEFT = 3
ATTACK_REQUEST_BOTH_HEAVY = 4
ATTACK_REQUEST_LIGHT_KICK = 5
ATTACK_REQUEST_HEAVY_KICK = 6
ATTACK_REQUEST_LEFT_LIGHT = 7
ATTACK_REQUEST_LEFT_HEAVY = 8
ATTACK_REQUEST_ARROW_BOTH_RIGHT = 9
ATTACK_REQUEST_ARROW_BOTH_LEFT = 10
ATTACK_REQUEST_ARROW_FIRE_RIGHT = 11
ATTACK_REQUEST_ARROW_FIRE_RIGHT2 = 12
ATTACK_REQUEST_ARROW_FIRE_LEFT = 13
ATTACK_REQUEST_ARROW_FIRE_LEFT2 = 14
ATTACK_REQUEST_ATTACK_WHILE_GUARD = 15
ATTACK_REQUEST_ARROW_CHANGE_RIGHT = 16
ATTACK_REQUEST_ARROW_CHANGE_LEFT = 17
ATTACK_REQUEST_RIGHT_CROSSBOW = 18
ATTACK_REQUEST_RIGHT_CROSSBOW2 = 19
ATTACK_REQUEST_LEFT_CROSSBOW = 20
ATTACK_REQUEST_LEFT_CROSSBOW2 = 21
ATTACK_REQUEST_BOTHRIGHT_CROSSBOW = 22
ATTACK_REQUEST_BOTHRIGHT_CROSSBOW2 = 23
ATTACK_REQUEST_BOTHLEFT_CROSSBOW = 24
ATTACK_REQUEST_BOTHLEFT_CROSSBOW2 = 25
ATTACK_REQUEST_LEFT_REVERSAL = 26
ATTACK_REQUEST_LEFT_HEAVY_SP = 27

-- Sword Arts Request (Left)
SWORDARTS_REQUEST_LEFT_PARRY = 101
SWORDARTS_REQUEST_LEFT_STEPIN = 102
SWORDARTS_REQUEST_LEFT_SPIN = 103
SWORDARTS_REQUEST_LEFT_DRAWSTANCE = 104
SWORDARTS_REQUEST_LEFT_STRONGBASH = 105
SWORDARTS_REQUEST_LEFT_DOUBLEATTACK = 106
SWORDARTS_REQUEST_LEFT_DOUBLECAST = 107
SWORDARTS_REQUEST_LEFT_CHAINSHOT = 108
SWORDARTS_REQUEST_LEFT_STAMPEDE = 110
SWORDARTS_REQUEST_LEFT_ATTACKSPIN = 111
SWORDARTS_REQUEST_LEFT_WARCRY = 112
SWORDARTS_REQUEST_LEFT_CHARGE = 113
SWORDARTS_REQUEST_LEFT_ENDURE = 114
SWORDARTS_REQUEST_LEFT_MAGICBUFF = 116
SWORDARTS_REQUEST_LEFT_SAMAGIC = 117
SWORDARTS_REQUEST_LEFT_CIRCLESTEP = 118
SWORDARTS_REQUEST_LEFT_CHARGESHOT = 119
SWORDARTS_REQUEST_LEFT_CROSSBOWSTEPIN = 120
SWORDARTS_REQUEST_LEFT_HEADHUNT = 121
SWORDARTS_REQUEST_LEFT_ONESHOT = 122
SWORDARTS_REQUEST_LEFT_ONESHOTFULL = 123
SWORDARTS_REQUEST_LEFT_ONESHOT_NOGENTRANS = 124
SWORDARTS_REQUEST_LEFT_STORMSTANCE = 125
SWORDARTS_REQUEST_LEFT_STRONGSHOT = 126
SWORDARTS_REQUEST_LEFT_WIDESHOT = 129
SWORDARTS_REQUEST_LEFT_MAGICBUFFPRAY = 130
SWORDARTS_REQUEST_LEFT_FOURWAYATTACK = 131
SWORDARTS_REQUEST_LEFT_FOURWAYDRAWSTANCE = 132
SWORDARTS_REQUEST_LEFT_GATLINGSTANCE = 133
SWORDARTS_REQUEST_LEFT_RANDOMONESHOT = 134
SWORDARTS_REQUEST_LEFT_MAGICBUFFATTACK = 135
SWOORDARTS_REQUEST_LEFT_DAGGERSTANCE = 136

-- Sword Arts Request (Right)
SWORDARTS_REQUEST_RIGHT_PARRY = 201
SWORDARTS_REQUEST_RIGHT_STEPIN = 202
SWORDARTS_REQUEST_RIGHT_SPIN = 203
SWORDARTS_REQUEST_RIGHT_DRAWSTANCE = 204
SWORDARTS_REQUEST_RIGHT_STRONGBASH = 205
SWORDARTS_REQUEST_RIGHT_DOUBLEATTACK = 206
SWORDARTS_REQUEST_RIGHT_DOUBLECAST = 207
SWORDARTS_REQUEST_RIGHT_CHAINSHOT = 208
SWORDARTS_REQUEST_RIGHT_STAMPEDE = 210
SWORDARTS_REQUEST_RIGHT_ATTACKSPIN = 211
SWORDARTS_REQUEST_RIGHT_WARCRY = 212
SWORDARTS_REQUEST_RIGHT_CHARGE = 213
SWORDARTS_REQUEST_RIGHT_ENDURE = 214
SWORDARTS_REQUEST_RIGHT_MAGICBUFF = 216
SWORDARTS_REQUEST_RIGHT_SAMAGIC = 217
SWORDARTS_REQUEST_RIGHT_CIRCLESTEP = 218
SWORDARTS_REQUEST_RIGHT_CHARGESHOT = 219
SWORDARTS_REQUEST_RIGHT_CROSSBOWSTEPIN = 220
SWORDARTS_REQUEST_RIGHT_HEADHUNT = 221
SWORDARTS_REQUEST_RIGHT_ONESHOT = 222
SWORDARTS_REQUEST_RIGHT_ONESHOTFULL = 223
SWORDARTS_REQUEST_RIGHT_ONESHOT_NOGENTRANS = 224
SWORDARTS_REQUEST_RIGHT_STORMSTANCE = 225
SWORDARTS_REQUEST_RIGHT_STRONGSHOT = 226
SWORDARTS_REQUEST_RIGHT_WIDESHOT = 229
SWORDARTS_REQUEST_RIGHT_MAGICBUFFPRAY = 230
SWORDARTS_REQUEST_RIGHT_FOURWAYATTACK = 231
SWORDARTS_REQUEST_RIGHT_FOURWAYDRAWSTANCE = 232
SWORDARTS_REQUEST_RIGHT_GATLINGSTANCE = 233
SWORDARTS_REQUEST_RIGHT_RANDOMONESHOT = 234
SWORDARTS_REQUEST_RIGHT_MAGICBUFFATTACK = 235
SWORDARTS_REQUEST_RIGHT_DAGGERSTANCE = 236
SWORDARTS_REQUEST_INVALID = 900

-- Interrupt
INTERRUPT_FINDATTACK = 0
INTERRUPT_USEITEM = 1

-- Sword Arts Index
SWORDARTS_RIGHTARTS = 0
SWORDARTS_PARRY = 1
SWORDARTS_STEPIN = 2
SWORDARTS_SPIN = 3
SWORDARTS_DRAWSTANCE = 4
SWORDARTS_STRONGBASH = 5
SWORDARTS_DOUBLEATTACK = 6
SWORDARTS_DOUBLECAST = 7
SWORDARTS_CHAINSHOT = 8
SWORDARTS_STAMPEDE = 10
SWORDARTS_ATTACKSPIN = 11
SWORDARTS_WARCRY = 12
SWORDARTS_CHARGE = 13
SWORDARTS_ENDURE = 14
SWORDARTS_MAGICBUFF = 16
SWORDARTS_SAMAGIC = 17
SWORDARTS_CIRCLESTEP = 18
SWORDARTS_CHARGESHOT = 19
SWORDARTS_CROSSBOWSTEPIN = 20
SWORDARTS_HEADHUNT = 21
SWORDARTS_ONESHOT = 22
SWORDARTS_ONESHOTFULL = 23
SWORDARTS_ONESHOT_NOGENTRANS = 24
SWORDARTS_STORMSTANCE = 25
SWORDARTS_STRONGSHOT = 26
SWORDARTS_SAMAGICMEDIUM = 27
SWORDARTS_SAMAGICSTRONG = 28
SWORDARTS_WIDESHOT = 29
SWORDARTS_MAGICBUFFPRAY = 30
SWORDARTS_FOURWAYATTACK = 31
SWORDARTS_FOURWAYDRAWSTANCE = 32
SWORDARTS_GATLINGSTANCE = 33
SWORDARTS_RANDOMONESHOT = 34
SWORDARTS_MAGICBUFFATTACK = 35
SWORDARTS_DAGGERSTANCE = 36
SWORDARTS_INVALID = 99

-- Throw State
THROW_STATE_INVALID = 255
THROW_STATE_DEFAULT = 0
THROW_REQUEST = 0
THROW_DAMAGE = 1
THROW_NO_REQUEST = 2

-- Guard Style
GUARD_STYLE_DEFAULT = 0
GUARD_STYLE_SMALL = 1
GUARD_STYLE_LARGE = 2
GUARD_STYLE_TORCH = 3

-- Ceremony
CEREMONY_STATE_IDLE = 1
CEREMONY_STATE_MOVE = 2
CEREMONY_STATE_RELEASE = 3
CEREMONY_STATE_FORCE_RELEASE = 3

-- Ladder Damage
LADDER_DAMAGE_NONE = 0
LADDER_DAMAGE_SMALL = 1
LADDER_DAMAGE_LARGE = 2

-- Acceleration
ACCELERATION_SPEED_DOWN = 3
ACCELERATION_WALK_SPEED_UP = 3
ACCELERATION_DASH_SPEED_UP = 6
ACCELERATION_DASH_SPEED_UP = 4.5

-- Blend
START_FRAME_ALL = 0
START_FRAME_A02 = 1
START_FRAME_NONE = 2
GUARD_DEF0 = 0
MOVE_DEF0 = 1
QUICKTURN_DEF0 = 3
HANDCHANGE_DEF0 = 4
WEAPONCHANGE_DEF0 = 5
ATTACKARROWRIGHT_DEF0 = 6
DRAWSTANCERIGHT_DEF0 = 8
CHAINSHOTRIGHT_DEF0 = 9
MAGIC_DEF0 = 11
ITEM_DEF0 = 12
ATTACKCROSSBOWRIGHT_DEF0 = 13
ATTACKCROSSBOWLEFT_DEF0 = 14
ATTACKCROSSBOWBOTHRIGHT_DEF0 = 15
ATTACKCROSSBOWBOTHLEFT_DEF0 = 16
MOVECEREMONY_DEF0 = 17
CHAINRECOVER_DEF0 = 20
USEGENTRANSITION_DEF0 = 21
GESTURE_DEF0 = 22
MAGICBUFFRIGHT_DEF0 = 23
MAGICBUFFLEFT_DEF0 = 24
STOP_DEF0 = 25
STORMSTANCE_DEF0 = 27
CHARGESHOTRIGHT_DEF0 = 28
EVENT_DEF0 = 29
GATLINGSTANCE_DEF0 = 30
GUARDSTART_DEF1 = 0
GUARDEND_DEF1 = 1
GUARDON_DEF1 = 2
HANDCHANGESTART_DEF1 = 0
HANDCHANGEEND_DEF1 = 1
HANDCHANGESTARTMIRROR_DEF1 = 2
HANDCHANGEENDMIRROR_DEF1 = 3
WEAPONCHANGESTART_DEF1 = 0
WEAPONCHANGEEND_DEF1 = 1
WEAPONCHANGESTARTMIRROR_DEF1 = 2
WEAPONCHANGEENDMIRROR_DEF1 = 3
ATTACKARROWRIGHTSTART_DEF1 = 0
ATTACKARROWRIGHTLOOP_DEF1 = 1
ATTACKARROWRIGHTSTARTMIRROR_DEF1 = 2
DRAWSTANCERIGHTSTART_DEF1 = 0
DRAWSTANCERIGHTEND_DEF1 = 1
DRAWSTANCERIGHTLOOP_DEF1 = 2
DRAWSTANCERIGHTLOOPNOSYNC_DEF1 = 3
DRAWSTANCERIGHTLOOPNMAXNOSYNC_DEF1 = 4
CHAINSHOTRIGHTSTART_DEF1 = 0
CHAINSHOTRIGHTEND_DEF1 = 1
CHAINSHOTRIGHTLOOP_DEF1 = 2
CHAINSHOTRIGHTSTARTMIRROR_DEF1 = 3
QUICKTURN_LEFT180_DEF1 = 0
QUICKTURN_RIGHT180_DEF1 = 1
QUICKTURN_LEFT180MIRROR_DEF1 = 2
QUICKTURN_RIGHT180MIRROR_DEF1 = 3
CHAINRECOVER_DEF1 = 0
CHAINRECOVERMIRROR_DEF1 = 1
MAGICLEFT_DEF1 = 0
MAGICRIGHT_DEF1 = 1
MAGICLAUNCH_DEF2 = 0
MAGICLAUNCHSA_DEF2 = 1
MAGICLOOP_DEF2 = 2
MAGICLOOPSA_DEF2 = 3
MAGICLOOPLVL2_DEF2 = 4
MAGICFIRE_DEF2 = 10
MAGICFIRE2_DEF2 = 11
MAGICFIRE3_DEF2 = 12
MAGICFIRELVL2_DEF2 = 13
QUICKMAGICFIRENORMAL_DEF2 = 20
QUICKMAGICFIREDASH_DEF2 = 21
QUICKMAGICFIRESTEP_DEF2 = 22
QUICKMAGICFIREATTACKLEFT_DEF2 = 23
QUICKMAGICFIREATTACKRIGHT_DEF2 = 24
QUICKMAGICFIREATTACKLEFT2_DEF2 = 25
QUICKMAGICFIREATTACKRIGHT2_DEF2 = 26
MAGICINVALID_DEF2 = 90
MAGICINVALIDMIRROR_DEF2 = 91
ITEMNORMAL_DEF1 = 0
ITEMQUICK_DEF1 = 1
ITEMWEAPONENCHANT_DEF2 = 0
ITEMTHROWKNIFE_DEF2 = 1
ITEMTHROWBOTTLE_DEF2 = 2
ITEMMEGANESTART_DEF2 = 3
ITEMMEGANELOOP_DEF2 = 4
ITEMMEGANEEND_DEF2 = 5
ITEMWEAPONREPAIR_DEF2 = 6
ITEMSOUL_DEF2 = 7
ITEMDRINKSTART_DEF2 = 8
ITEMDRINKNOTHING_DEF2 = 9
ITEMDRINKING_DEF2 = 10
ITEMDRINKEND_DEF2 = 11
ITEM_INVALID_DEF2 = 12
ITEMSHOCKWAVESTART_DEF2 = 13
ITEMSHOCKWAVEEND_DEF2 = 14
ITEMRECOVER_DEF2 = 15
ITEMMESSAGE_DEF2 = 16
ITEMPRAY_DEF2 = 17
ITEMTRAP_DEF2 = 18
ITEMDRINKSTARTMP_DEF2 = 19
ITEMDRINKINGMP_DEF2 = 20
DRAGONHEADSTARTBEFORE_DEF2 = 21
DRAGONHEADSTARTAFTER_DEF2 = 22
DRAGONHEADENDBEFORE_DEF2 = 23
DRAGONHEADLOOPAFTER_DEF2 = 24
DRAGONHEADENDAFTER_DEF2 = 25
DRAGONFULLSTARTBEFORE_DEF2 = 26
DRAGONFULLENDBEFORE_DEF2 = 27
DRAGONFULLSTARTAFTER_DEF2 = 28
ITEMBACKBOTTLE_DEF2 = 29
ITEMDRINKNOTHINGMP_DEF2 = 30
ITEMDRINKENDMP_DEF2 = 31
ITEMDRINKSTARTSAKE_DEF2 = 32
ITEMDRINKINGSAKE_DEF2 = 33
ITEMDRINKENDSAKE_DEF2 = 34
ITEMDRINKEMPTY_DEF2 = 35
ITEMCHAMELEON_DEF2 = 36
DRAGONHEADSTARTAFTERLVL2_DEF2 = 37
DRAGONFULLSTARTAFTERLVL2_DEF2 = 38
DRAGONHEADLOOPAFTERLVL2_DEF2 = 39
DRAGONHEADENDAFTERLVL2_DEF2 = 40
ITEMOLDMONK_DEF2 = 41
ITEMDRINKINGMIRROR_DEF2 = 90
ITEMDRINKINGMPMIRROR_DEF2 = 91
ITEMDRINKINGSAKEMIRROR_DEF2 = 92
QUICKITEMTHROWKNIFENORMAL_DEF2 = 0
QUICKITEMTHROWKNIFEDASH_DEF2 = 1
QUICKITEMTHROWKNIFESTEP_DEF2 = 2
QUICKITEMTHROWKNIFEATTACKLEFT_DEF2 = 3
QUICKITEMTHROWKNIFEATTACKRIGHT_DEF2 = 4
QUICKITEMTHROWKNIFEATTACKLEFT2_DEF2 = 5
QUICKITEMTHROWKNIFEATTACKRIGHT2_DEF2 = 6
QUICKITEMENCHANTNORMAL_DEF2 = 20
QUICKITEMENCHANTDASH_DEF2 = 21
QUICKITEMENCHANTSTEP_DEF2 = 22
QUICKITEMENCHANTATTACKLEFT_DEF2 = 23
QUICKITEMENCHANTATTACKRIGHT_DEF2 = 24
ATTACKCROSSBOWRIGHTSTART_DEF1 = 0
ATTACKCROSSBOWRIGHTFIRE_DEF1 = 1
ATTACKCROSSBOWRIGHTEMPTY_DEF1 = 2
ATTACKCROSSBOWRIGHTRELOAD_DEF1 = 3
ATTACKCROSSBOWRIGHTLOOP_DEF1 = 4
ATTACKCROSSBOWLEFTSTART_DEF1 = 0
ATTACKCROSSBOWLEFTFIRE_DEF1 = 1
ATTACKCROSSBOWLEFTEMPTY_DEF1 = 2
ATTACKCROSSBOWLEFTRELOAD_DEF1 = 3
ATTACKCROSSBOWLEFTLOOP_DEF1 = 4
ATTACKCROSSBOWBOTHLEFTSTART_DEF1 = 0
ATTACKCROSSBOWBOTHLEFTFIRE_DEF1 = 1
ATTACKCROSSBOWBOTHLEFTEMPTY_DEF1 = 2
ATTACKCROSSBOWBOTHLEFTRELOAD_DEF1 = 3
ATTACKCROSSBOWBOTHLEFTLOOP_DEF1 = 4
ATTACKCROSSBOWBOTHRIGHTSTART_DEF1 = 0
ATTACKCROSSBOWBOTHRIGHTFIRE_DEF1 = 1
ATTACKCROSSBOWBOTHRIGHTEMPTY_DEF1 = 2
ATTACKCROSSBOWBOTHRIGHTRELOAD_DEF1 = 3
ATTACKCROSSBOWBOTHRIGHTLOOP_DEF1 = 4
STORMSTANCESTART_DEF1 = 0
STORMSTANCELOOP_DEF1 = 1
STORMSTANCEND_DEF1 = 2
STORMSTANCECHANGE_DEF1 = 3
STORMSTANCEFULLSTART_DEF1 = 4
STORMSTANCEFULLLOOP_DEF1 = 5
STORMSTANCEFULLEND_DEF1 = 6
CHARGESHOTRIGHTSTART_DEF1 = 0
CHARGESHOTRIGHTLOOP_DEF1 = 1
CHARGESHOTRIGHTEND_DEF1 = 2
CHARGESHOTRIGHTHOLDSTART_DEF1 = 3
CHARGESHOTRIGHTHOLDLOOP_DEF1 = 4
ATTACKSPIN_DEF1 = 0
CHARGE_DEF1 = 1
STEPINRIGHTSTART_DEF1 = 2
CROSSBOWSTEPINSTART_DEF1 = 3
HEADHUNT_DEF1 = 4
ONESHOT_DEF1 = 5
ENDURE_DEF1 = 6
GESTURESTART_DEF1 = 0
GESTURELOOP_DEF1 = 1
GESTUREEND_DEF1 = 2
GESTURELOOPSTART_DEF1 = 3
MAGICBUFFRIGHT_DEF1 = 0
MAGICBUFFRIGHTMIRROR_DEF1 = 1
MAGICBUFFLEFT_DEF1 = 0
MAGICBUFFLEFTMIRROR_DEF1 = 1
DASHSTOP_DEF1 = 0
RUNSTOPFRONT_DEF1 = 1
RUNSTOPBACK_DEF1 = 2
RUNSTOPLEFT_DEF1 = 3
RUNSTOPRIGHT_DEF1 = 4
WALKSTOPFRONT_DEF1 = 5
WALKSTOPBACK_DEF1 = 6
WALKSTOPLEFT_DEF1 = 7
WALKSTOPRIGHT_DEF1 = 8
DASH180_DEF1 = 9
EVENT61000_DEF1 = 0
EVENT61000MIRROR_DEF1 = 1
GATLINGSTANCERIGHTSTART_DEF1 = 0
GATLINGSTANCERIGHTEND_DEF1 = 1
GATLINGSTANCERIGHTFIRESTART_DEF1 = 2
GATLINGSTANCERIGHTLOOP_DEF1 = 3
GATLINGSTANCERIGHTFIRESTARTLEFT_DEF1 = 4

-- Blend Tables
Event_GuardStart = {"W_GuardStart", GUARD_DEF0, GUARDSTART_DEF1}
Event_GuardEnd = {"W_GuardEnd", GUARD_DEF0, GUARDEND_DEF1}
Event_GuardOn = {"W_GuardOn", GUARD_DEF0, GUARDON_DEF1}
Event_GuardStartLong = {"W_GuardStartLong", GUARD_DEF0, GUARDSTART_DEF1}
Event_Move = {"W_Move", MOVE_DEF0}
Event_MoveLong = {"W_MoveLong", MOVE_DEF0}
Event_MoveShort = {"W_MoveShort", MOVE_DEF0}
Event_MoveCult = {"W_MoveCult", MOVECEREMONY_DEF0}
Event_MoveNoSync = {"W_MoveNoSync", MOVE_DEF0}
Event_HandChangeStart = {"W_HandChangeStart", HANDCHANGE_DEF0, HANDCHANGESTART_DEF1}
Event_HandChangeEnd = {"W_HandChangeEnd", HANDCHANGE_DEF0, HANDCHANGEEND_DEF1}
Event_HandChangeStartMirror = {"W_HandChangeStart_mirror", HANDCHANGE_DEF0, HANDCHANGESTARTMIRROR_DEF1}
Event_HandChangeEndMirror = {"W_HandChangeEnd_mirror", HANDCHANGE_DEF0, HANDCHANGEENDMIRROR_DEF1}
Event_WeaponChangeStart = {"W_WeaponChangeStart", WEAPONCHANGE_DEF0, WEAPONCHANGESTART_DEF1}
Event_WeaponChangeEnd = {"W_WeaponChangeEnd", WEAPONCHANGE_DEF0, WEAPONCHANGEEND_DEF1}
Event_WeaponChangeStartMirror = {"W_WeaponChangeStart_mirror", WEAPONCHANGE_DEF0, WEAPONCHANGESTARTMIRROR_DEF1}
Event_WeaponChangeEndMirror = {"W_WeaponChangeEnd_mirror", WEAPONCHANGE_DEF0, WEAPONCHANGEENDMIRROR_DEF1}
Event_AttackArrowRightStart = {"W_AttackArrowRightStart", ATTACKARROWRIGHT_DEF0, ATTACKARROWRIGHTSTART_DEF1}
Event_AttackArrowRightLoop = {"W_AttackArrowRightLoop", ATTACKARROWRIGHT_DEF0, ATTACKARROWRIGHTLOOP_DEF1}
Event_AttackArrowRightStartMirror = {"W_AttackArrowRightStart_mirror", ATTACKARROWRIGHT_DEF0, ATTACKARROWRIGHTSTARTMIRROR_DEF1}
Event_DrawStanceRightStart = {"W_DrawStanceRightStart", DRAWSTANCERIGHT_DEF0, DRAWSTANCERIGHTSTART_DEF1}
Event_DrawStanceRightEnd = {"W_DrawStanceRightEnd", DRAWSTANCERIGHT_DEF0, DRAWSTANCERIGHTEND_DEF1}
Event_DrawStanceRightLoop = {"W_DrawStanceRightLoop", DRAWSTANCERIGHT_DEF0, DRAWSTANCERIGHTLOOP_DEF1}
Event_DrawStanceRightLoopNoSync = {"W_DrawStanceRightLoopNoSync", DRAWSTANCERIGHT_DEF0, DRAWSTANCERIGHTLOOPNOSYNC_DEF1}
Event_DrawStanceRightLoopMaxNoSync = {"W_DrawStanceRightLoopMaxNoSync", DRAWSTANCERIGHT_DEF0, DRAWSTANCERIGHTLOOPMAXNOSYNC_DEF1}
Event_ChainShotRightStart = {"W_ChainShotRightStart", CHAINSHOTRIGHT_DEF0, CHAINSHOTRIGHTSTART_DEF1}
Event_ChainShotRightEnd = {"W_ChainShotRightEnd", CHAINSHOTRIGHT_DEF0, CHAINSHOTRIGHTEND_DEF1}
Event_ChainShotRightLoop = {"W_ChainShotRightLoop", CHAINSHOTRIGHT_DEF0, CHAINSHOTRIGHTLOOP_DEF1}
Event_ChainShotRightStartMirror = {"W_ChainShotRightStart_mirror", CHAINSHOTRIGHT_DEF0, CHAINSHOTRIGHTSTARTMIRROR_DEF1}
Event_QuickTurnLeft180 = {"W_QuickTurnLeft180", QUICKTURN_DEF0, QUICKTURN_LEFT180_DEF1}
Event_QuickTurnRight180 = {"W_QuickTurnRight180", QUICKTURN_DEF0, QUICKTURN_RIGHT180_DEF1}
Event_QuickTurnLeft180Mirror = {"W_QuickTurnLeft180_mirror", QUICKTURN_DEF0, QUICKTURN_LEFT180MIRROR_DEF1}
Event_QuickTurnRight180Mirror = {"W_QuickTurnRight180_mirror", QUICKTURN_DEF0, QUICKTURN_RIGHT180MIRROR_DEF1}
Event_MagicLaunchLeft = {"W_MagicLaunchLeft", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICLAUNCH_DEF2}
Event_MagicLaunchLeftSA = {"W_MagicLaunchLeftSA", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICLAUNCHSA_DEF2}
Event_MagicLoopLeft = {"W_MagicLoopLeft", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICLOOP_DEF2}
Event_MagicLoopLeftSA = {"W_MagicLoopLeftSA", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICLOOPSA_DEF2}
Event_MagicLoopLeftLvl2 = {"W_MagicLoopLeftLvl2", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICLOOPLVL2_DEF2}
Event_MagicFireLeft = {"W_MagicFireLeft", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICFIRE_DEF2}
Event_MagicFireLeft2 = {"W_MagicFireLeft2", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICFIRE2_DEF2}
Event_MagicFireLeft3 = {"W_MagicFireLeft3", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICFIRE2_DEF3}
Event_MagicFireLeftLvl2 = {"W_MagicFireLeftLvl2", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICFIRELVL2_DEF2}
Event_QuickMagicFireLeftNormal = {"W_QuickMagicFireLeftNormal", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIRENORMAL_DEF2}
Event_QuickMagicFireLeftDash = {"W_QuickMagicFireLeftDash", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIREDASH_DEF2}
Event_QuickMagicFireLeftStep = {"W_QuickMagicFireLeftStep", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIRESTEP_DEF2}
Event_QuickMagicFireLeftAttackLeft = {"W_QuickMagicFireLeftAttackLeft", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIREATTACKLEFT_DEF2}
Event_QuickMagicFireLeftAttackRight = {"W_QuickMagicFireLeftAttackRight", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIREATTACKRIGHT_DEF2}
Event_QuickMagicFireLeftAttackLeft2 = {"W_QuickMagicFireLeftAttackLeft2", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIREATTACKLEFT2_DEF2}
Event_QuickMagicFireLeftAttackRight2 = {"W_QuickMagicFireLeftAttackRight2", MAGIC_DEF0, MAGICLEFT_DEF1, QUICKMAGICFIREATTACKRIGHT2_DEF2}
Event_MagicInvalidLeft = {"W_MagicInvalidLeft", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICINVALID_DEF2}
Event_MagicInvalidLeftMirror = {"W_MagicInvalidLeft_mirror", MAGIC_DEF0, MAGICLEFT_DEF1, MAGICINVALIDMIRROR_DEF2}
Event_MagicLaunchRight = {"W_MagicLaunchRight", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICLAUNCH_DEF2}
Event_MagicLaunchRightSA = {"W_MagicLaunchRightSA", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICLAUNCHSA_DEF2}
Event_MagicLoopRight = {"W_MagicLoopRight", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICLOOP_DEF2}
Event_MagicLoopRightSA = {"W_MagicLoopRightSA", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICLOOPSA_DEF2}
Event_MagicLoopRightLvl2 = {"W_MagicLoopRightLvl2", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICLOOPLVL2_DEF2}
Event_MagicFireRight = {"W_MagicFireRight", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICFIRE_DEF2}
Event_MagicFireRight2 = {"W_MagicFireRight2", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICFIRE2_DEF2}
Event_MagicFireRight3 = {"W_MagicFireRight3", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICFIRE2_DEF3}
Event_MagicFireRightLvl2 = {"W_MagicFireRightLvl2", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICFIRELVL2_DEF2}
Event_QuickMagicFireRightNormal = {"W_QuickMagicFireRightNormal", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIRENORMAL_DEF2}
Event_QuickMagicFireRightDash = {"W_QuickMagicFireRightDash", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIREDASH_DEF2}
Event_QuickMagicFireRightStep = {"W_QuickMagicFireRightStep", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIRESTEP_DEF2}
Event_QuickMagicFireRightAttackLeft = {"W_QuickMagicFireRightAttackLeft", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIREATTACKLEFT_DEF2}
Event_QuickMagicFireRightAttackRight = {"W_QuickMagicFireRightAttackRight", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIREATTACKRIGHT_DEF2}
Event_QuickMagicFireRightAttackLeft2 = {"W_QuickMagicFireRightAttackLeft2", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIREATTACKLEFT2_DEF2}
Event_QuickMagicFireRightAttackRight2 = {"W_QuickMagicFireRightAttackRight2", MAGIC_DEF0, MAGICRIGHT_DEF1, QUICKMAGICFIREATTACKRIGHT2_DEF2}
Event_MagicInvalidRight = {"W_MagicInvalidRight", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICINVALID_DEF2}
Event_MagicInvalidRightMirror = {"W_MagicInvalidRight_mirror", MAGIC_DEF0, MAGICRIGHT_DEF1, MAGICINVALIDMIRROR_DEF2}
Event_ItemWeaponEnchant = {"W_ItemWeaponEnchant", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMWEAPONENCHANT_DEF2}
Event_ItemThrowKnife = {"W_ItemThrowKnife", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMTHROWKNIFE_DEF2}
Event_ItemThrowBottle = {"W_ItemThrowBottle", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMTHROWBOTTLE_DEF2}
Event_ItemMeganeStart = {"W_ItemMeganeStart", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMMEGANESTART_DEF2}
Event_ItemMeganeLoop = {"W_ItemMeganeLoop", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMMEGANELOOP_DEF2}
Event_ItemMeganeEnd = {"W_ItemMeganeEnd", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMMEGANEEND_DEF2}
Event_ItemWeaponRepair = {"W_ItemWeaponRepair", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMWEAPONREPAIR_DEF2}
Event_ItemSoul = {"W_ItemSoul", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMSOUL_DEF2}
Event_ItemDrinkStart = {"W_ItemDrinkStart", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKSTART_DEF2}
Event_ItemDrinkNothing = {"W_ItemDrinkNothing", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKNOTHING_DEF2}
Event_ItemDrinking = {"W_ItemDrinking", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKING_DEF2}
Event_ItemDrinkEnd = {"W_ItemDrinkEnd", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKEND_DEF2}
Event_ItemInvalid = {"W_ItemInvalid", ITEM_DEF0, ITEMNORMAL_DEF1, ITEM_INVALID_DEF2}
Event_ItemShockWeaveStart = {"W_ItemShockWeaveStart", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMSHOCKWAVESTART_DEF2}
Event_ItemShockWeaveEnd = {"W_ItemShockWeaveEnd", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMSHOCKWAVEEND_DEF2}
Event_ItemRecover = {"W_ItemRecover", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMRECOVER_DEF2}
Event_ItemMessage = {"W_ItemMessage", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMMESSAGE_DEF2}
Event_ItemPray = {"W_ItemPray", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMPRAY_DEF2}
Event_ItemTrap = {"W_ItemTrap", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMTRAP_DEF2}
Event_ItemDrinkStartMP = {"W_ItemDrinkStartMP", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKSTARTMP_DEF2}
Event_ItemDrinkingMP = {"W_ItemDrinkingMP", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKINGMP_DEF2}
Event_ItemDrinkEndMP = {"W_ItemDrinkEndMP", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKENDMP_DEF2}
Event_ItemDrinkNothingMP = {"W_ItemDrinkNothingMP", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKNOTHINGMP_DEF2}
Event_ItemBackBottle = {"W_ItemBackBottle", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMBACKBOTTLE_DEF2}
Event_ItemDrinkStartSake = {"W_ItemDrinkStartSake", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKSTARTSAKE_DEF2}
Event_ItemDrinkingSake = {"W_ItemDrinkingSake", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKINGSAKE_DEF2}
Event_ItemDrinkEndSake = {"W_ItemDrinkEndSake", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKENDSAKE_DEF2}
Event_ItemDrinkEmpty = {"W_ItemDrinkEmpty", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKEMPTY_DEF2}
Event_ItemChameleon = {"W_ItemChameleon", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMCHAMELEON_DEF2}
Event_DragonHeadStartBefore = {"W_DragonHeadStartBefore", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADSTARTBEFORE_DEF2}
Event_DragonHeadStartAfter = {"W_DragonHeadStartAfter", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADSTARTAFTER_DEF2}
Event_DragonHeadStartAfterLVL2 = {"W_DragonHeadStartAfterLVL2", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADSTARTAFTERLVL2_DEF2}
Event_DragonHeadEndBefore = {"W_DragonHeadEndBefore", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADENDBEFORE_DEF2}
Event_DragonHeadLoopAfter = {"W_DragonHeadLoopAfter", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADLOOPAFTER_DEF2}
Event_DragonHeadEndAfter = {"W_DragonHeadEndAfter", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADENDAFTER_DEF2}
Event_DragonFullStartBefore = {"W_DragonFullStartBefore", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONFULLSTARTBEFORE_DEF2}
Event_DragonFullEndBefore = {"W_DragonFullEndBefore", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONFULLENDBEFORE_DEF2}
Event_DragonFullStartAfter = {"W_DragonFullStartAfter", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONFULLSTARTAFTER_DEF2}
Event_DragonFullStartAfterLVL2 = {"W_DragonFullStartAfterLVL2", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONFULLSTARTAFTERLVL2_DEF2}
Event_DragonHeadLoopAfterLVL2 = {"W_DragonHeadLoopAfterLVL2", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADLOOPAFTERLVL2_DEF2}
Event_DragonHeadEndAfterLVL2 = {"W_DragonHeadEndAfterLVL2", ITEM_DEF0, ITEMNORMAL_DEF1, DRAGONHEADENDAFTERLVL2_DEF2}
Event_ItemOldMonk = {"W_ItemOldMonk", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMOLDMONK_DEF2}
Event_ItemDrinkingMirror = {"W_ItemDrinking_mirror", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKINGMIRROR_DEF2}
Event_ItemDrinkingMPMirror = {"W_ItemDrinkingMP_mirror", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKINGMPMIRROR_DEF2}
Event_ItemDrinkingSakeMirror = {"W_ItemDrinkingSake_mirror", ITEM_DEF0, ITEMNORMAL_DEF1, ITEMDRINKINGSAKEMIRROR_DEF2}
Event_QuickItemThrowKnifeNormal = {"W_QuickItemThrowKnifeNormal", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFENORMAL_DEF2}
Event_QuickItemThrowKnifeDash = {"W_QuickItemThrowKnifeDash", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFEDASH_DEF2}
Event_QuickItemThrowKnifeStep = {"W_QuickItemThrowKnifeStep", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFESTEP_DEF2}
Event_QuickItemThrowKnifeAttackLeft = {"W_QuickItemThrowKnifeAttackLeft", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFEATTACKLEFT_DEF2}
Event_QuickItemThrowKnifeAttackRight = {"W_QuickItemThrowKnifeAttackRight", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFEATTACKRIGHT_DEF2}
Event_QuickItemThrowKnifeAttackLeft2 = {"W_QuickItemThrowKnifeAttackLeft2", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFEATTACKLEFT2_DEF2}
Event_QuickItemThrowKnifeAttackRight2 = {"W_QuickItemThrowKnifeAttackRight2", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMTHROWKNIFEATTACKRIGHT2_DEF2}
Event_QuickItemEnchantNormal = {"W_QuickItemEnchantNormal", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMENCHANTNORMAL_DEF2}
Event_QuickItemEnchantDash = {"W_QuickItemEnchantDash", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMENCHANTDASH_DEF2}
Event_QuickItemEnchantStep = {"W_QuickItemEnchantStep", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMENCHANTSTEP_DEF2}
Event_QuickItemEnchantAttackLeft = {"W_QuickItemEnchantAttackLeft", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMENCHANTATTACKLEFT_DEF2}
Event_QuickItemEnchantAttackRight = {"W_QuickItemEnchantAttackRight", ITEM_DEF0, ITEMQUICK_DEF1, QUICKITEMENCHANTATTACKRIGHT_DEF2}
Event_AttackCrossbowRightStart = {"W_AttackCrossbowRightStart", ATTACKCROSSBOWRIGHT_DEF0, ATTACKCROSSBOWRIGHTSTART_DEF1}
Event_AttackCrossbowRightFire = {"W_AttackCrossbowRightFire", ATTACKCROSSBOWRIGHT_DEF0, ATTACKCROSSBOWRIGHTFIRE_DEF1}
Event_AttackCrossbowRightEmpty = {"W_AttackCrossbowRightEmpty", ATTACKCROSSBOWRIGHT_DEF0, ATTACKCROSSBOWRIGHTEMPTY_DEF1}
Event_AttackCrossbowRightReload = {"W_AttackCrossbowRightReload", ATTACKCROSSBOWRIGHT_DEF0, ATTACKCROSSBOWRIGHTRELOAD_DEF1}
Event_AttackCrossbowRightLoop = {"W_AttackCrossbowRightLoop", ATTACKCROSSBOWRIGHT_DEF0, ATTACKCROSSBOWRIGHTLOOP_DEF1}
Event_AttackCrossbowLeftStart = {"W_AttackCrossbowLeftStart", ATTACKCROSSBOWLEFT_DEF0, ATTACKCROSSBOWLEFTSTART_DEF1}
Event_AttackCrossbowLeftFire = {"W_AttackCrossbowLeftFire", ATTACKCROSSBOWLEFT_DEF0, ATTACKCROSSBOWLEFTFIRE_DEF1}
Event_AttackCrossbowLeftEmpty = {"W_AttackCrossbowLeftEmpty", ATTACKCROSSBOWLEFT_DEF0, ATTACKCROSSBOWLEFTEMPTY_DEF1}
Event_AttackCrossbowLeftReload = {"W_AttackCrossbowLeftReload", ATTACKCROSSBOWLEFT_DEF0, ATTACKCROSSBOWLEFTRELOAD_DEF1}
Event_AttackCrossbowLeftLoop = {"W_AttackCrossbowLeftLoop", ATTACKCROSSBOWLEFT_DEF0, ATTACKCROSSBOWLEFTLOOP_DEF1}
Event_AttackCrossbowBothLeftStart = {"W_AttackCrossbowBothLeftStart", ATTACKCROSSBOWBOTHLEFT_DEF0, ATTACKCROSSBOWBOTHLEFTSTART_DEF1}
Event_AttackCrossbowBothLeftFire = {"W_AttackCrossbowBothLeftFire", ATTACKCROSSBOWBOTHLEFT_DEF0, ATTACKCROSSBOWBOTHLEFTFIRE_DEF1}
Event_AttackCrossbowBothLeftEmpty = {"W_AttackCrossbowBothLeftEmpty", ATTACKCROSSBOWBOTHLEFT_DEF0, ATTACKCROSSBOWBOTHLEFTEMPTY_DEF1}
Event_AttackCrossbowBothLeftReload = {"W_AttackCrossbowBothLeftReload", ATTACKCROSSBOWBOTHLEFT_DEF0, ATTACKCROSSBOWBOTHLEFTRELOAD_DEF1}
Event_AttackCrossbowBothLeftLoop = {"W_AttackCrossbowBothLeftLoop", ATTACKCROSSBOWBOTHLEFT_DEF0, ATTACKCROSSBOWBOTHLEFTLOOP_DEF1}
Event_AttackCrossbowBothRightStart = {"W_AttackCrossbowBothRightStart", ATTACKCROSSBOWBOTHRIGHT_DEF0, ATTACKCROSSBOWBOTHRIGHTSTART_DEF1}
Event_AttackCrossbowBothRightFire = {"W_AttackCrossbowBothRightFire", ATTACKCROSSBOWBOTHRIGHT_DEF0, ATTACKCROSSBOWBOTHRIGHTFIRE_DEF1}
Event_AttackCrossbowBothRightEmpty = {"W_AttackCrossbowBothRightEmpty", ATTACKCROSSBOWBOTHRIGHT_DEF0, ATTACKCROSSBOWBOTHRIGHTEMPTY_DEF1}
Event_AttackCrossbowBothRightReload = {"W_AttackCrossbowBothRightReload", ATTACKCROSSBOWBOTHRIGHT_DEF0, ATTACKCROSSBOWBOTHRIGHTRELOAD_DEF1}
Event_AttackCrossbowBothRightLoop = {"W_AttackCrossbowBothRightLoop", ATTACKCROSSBOWBOTHRIGHT_DEF0, ATTACKCROSSBOWBOTHRIGHTRELOOP_DEF1}
Event_StormStanceStart = {"W_StormStanceStart", STORMSTANCE_DEF0, STORMSTANCESTART_DEF1}
Event_StormStanceLoop = {"W_StormStanceLoop", STORMSTANCE_DEF0, STORMSTANCELOOP_DEF1}
Event_StormStanceEnd = {"W_StormStanceEnd", STORMSTANCE_DEF0, STORMSTANCEND_DEF1}
Event_StormStanceChange = {"W_StormStanceChange", STORMSTANCE_DEF0, STORMSTANCECHANGE_DEF1}
Event_StormStanceFullStart = {"W_StormStanceFullStart", STORMSTANCE_DEF0, STORMSTANCEFULLSTART_DEF1}
Event_StormStanceFullLoop = {"W_StormStanceFullLoop", STORMSTANCE_DEF0, STORMSTANCEFULLLOOP_DEF1}
Event_StormStanceFullEnd = {"W_StormStanceFullEnd", STORMSTANCE_DEF0, STORMSTANCEFULLEND_DEF1}
Event_ChainRecover = {"W_ChainRecover", CHAINRECOVER_DEF0, CHAINRECOVER_DEF1}
Event_ChainRecoverMirror = {"W_ChainRecover_mirror", CHAINRECOVER_DEF0, CHAINRECOVERMIRROR_DEF1}
Event_ChargeShotRightStart = {"W_ChargeShotRightStart", CHARGESHOTRIGHT_DEF0, CHARGESHOTRIGHTSTART_DEF1}
Event_ChargeShotRightLoop = {"W_ChargeShotRightLoop", CHARGESHOTRIGHT_DEF0, CHARGESHOTRIGHTLOOP_DEF1}
Event_ChargeShotRightEnd = {"W_ChargeShotRightEnd", CHARGESHOTRIGHT_DEF0, CHARGESHOTRIGHTEND_DEF1}
Event_ChargeShotRightHoldStart = {"W_ChargeShotRightHoldStart", CHARGESHOTRIGHT_DEF0, CHARGESHOTRIGHTHOLDSTART_DEF1}
Event_ChargeShotRightHoldLoop = {"W_ChargeShotRightHoldLoop", CHARGESHOTRIGHT_DEF0, CHARGESHOTRIGHTHOLDLOOP_DEF1}
Event_StepInRightStart = {"W_StepInRightStart", USEGENTRANSITION_DEF0, STEPINRIGHTSTART_DEF1}
Event_AttackSpinStart = {"W_AttackSpinStart", USEGENTRANSITION_DEF0, ATTACKSPIN_DEF1}
Event_Charge = {"W_Charge", USEGENTRANSITION_DEF0, CHARGE_DEF1}
Event_CrossbowStepInRightStart = {"W_CrossbowStepInRightStart", USEGENTRANSITION_DEF0, CROSSBOWSTEPINSTART_DEF1}
Event_HeadHunt = {"W_HeadHunt", USEGENTRANSITION_DEF0, HEADHUNT_DEF1}
Event_OneShot = {"W_OneShot", USEGENTRANSITION_DEF0, ONESHOT_DEF1}
Event_Endure = {"W_Endure", USEGENTRANSITION_DEF0, ENDURE_DEF1}
Event_GestureStart = {"W_GestureStart", GESTURE_DEF0, GESTURESTART_DEF1}
Event_GestureLoop = {"W_GestureLoop", GESTURE_DEF0, GESTURELOOP_DEF1}
Event_GestureEnd = {"W_GestureEnd", GESTURE_DEF0, GESTUREEND_DEF1}
Event_GestureLoopStart = {"W_GestureLoopStart", GESTURE_DEF0, GESTURELOOPSTART_DEF1}
Event_MagicBuffRight = {"W_MagicBuffRight", MAGICBUFFRIGHT_DEF0, MAGICBUFFRIGHT_DEF1}
Event_MagicBuffRightMirror = {"W_MagicBuffRight_mirror", MAGICBUFFRIGHT_DEF0, MAGICBUFFRIGHTMIRROR_DEF1}
Event_MagicBuffLeft = {"W_MagicBuffLeft", MAGICBUFFLEFT_DEF0, MAGICBUFFLEFT_DEF1}
Event_MagicBuffLeftMirror = {"W_MagicBuffLeft_mirror", MAGICBUFFLEFT_DEF0, MAGICBUFFLEFTMIRROR_DEF1}
Event_DashStop = {"W_DashStop", STOP_DEF0, DASHSTOP_DEF1}
Event_RunStopFront = {"W_RunStopFront", STOP_DEF0, RUNSTOPFRONT_DEF1}
Event_RunStopBack = {"W_RunStopBack", STOP_DEF0, RUNSTOPBACK_DEF1}
Event_RunStopLeft = {"W_RunStopLeft", STOP_DEF0, RUNSTOPLEFT_DEF1}
Event_RunStopRight = {"W_RunStopRight", STOP_DEF0, RUNSTOPRIGHT_DEF1}
Event_WalkStopFront = {"W_WalkStopFront", STOP_DEF0, WALKSTOPFRONT_DEF1}
Event_WalkStopBack = {"W_WalkStopBack", STOP_DEF0, WALKSTOPBACK_DEF1}
Event_WalkStopLeft = {"W_WalkStopLeft", STOP_DEF0, WALKSTOPLEFT_DEF1}
Event_WalkStopRight = {"W_WalkStopRight", STOP_DEF0, WALKSTOPRIGHT_DEF1}
Event_Dash180 = {"W_Dash180", STOP_DEF0, DASH180_DEF1}
Event_Event61000 = {"W_Event61000", EVENT_DEF0, EVENT61000_DEF1}
Event_Event61000Mirror = {"W_Event61000_mirror", EVENT_DEF0, EVENT61000MIRROR_DEF1}
Event_GatlingStanceRightStart = {"W_GatlingStanceRightStart", GATLINGSTANCE_DEF0, GATLINGSTANCERIGHTSTART_DEF1}
Event_GatlingStanceRightEnd = {"W_GatlingStanceRightEnd", GATLINGSTANCE_DEF0, GATLINGSTANCERIGHTEND_DEF1}
Event_GatlingStanceRightFireStart = {"W_GatlingStanceRightFireStart", GATLINGSTANCE_DEF0, GATLINGSTANCERIGHTFIRESTART_DEF1}
Event_GatlingStanceRightLoop = {"W_GatlingStanceRightLoop", GATLINGSTANCE_DEF0, GATLINGSTANCERIGHTLOOP_DEF1}
Event_GatlingStanceRightFireStartLeft = {"W_GatlingStanceRightFireStartLeft", GATLINGSTANCE_DEF0, GATLINGSTANCERIGHTFIRESTARTLEFT_DEF1}

-- Global Variables
g_FrameCount = 0
g_IsForceReturn = FALSE
g_r1 = nil
g_r2 = nil
g_l1 = nil
g_l2 = nil
g_b1 = nil
g_b2 = nil
g_TimeActEditor_00 = 0
g_TimeActEditor_01 = 0
g_TimeActEditor_02 = 0
g_TimeActEditor_03 = 0
g_TimeActEditor_04 = 0
g_TimeActEditor_05 = 0
g_TimeActEditor_06 = 0
g_StormStanceHoldTime = 0
g_LoopStanceCycles = 0
g_LoopStanceLastCycle = 0
g_ItemFirstFrame = 0
c_HasActionRequest = FALSE
c_SwordArtsHand = 0
c_SwordArtsID = 0
c_IsEnableSwordArts = FALSE
c_IsFemale = FALSE
c_Style = 0
dash_dt_sum = 0

Flag_LadderDamage = LADDER_DAMAGE_NONE
Flag_LadderJump = LADDER_JUMP_INVALID

-- Evasion Stamina Costs
c_StaminaCostRolling = -20
c_StaminaCostBackStep = -14
c_StaminaCostJump = -20

------------------------------------------
-- Common: Functions
------------------------------------------
function IncNum(num)
    local str = "Debug"
    
    if num < 10 then
        str = "Debug0"
    end
    
    vector = GetVariable(str .. num)
    vector[0] = vector[0] + 1
    vector[1] = g_FrameCount
    
    SetVariable(str .. num, vector)
end

function DebugPrint(pos, val)
    local str = "Debug"
    
    if pos < 10 then
        str = "Debug0"
    end
    
    vector = GetVariable(str .. pos)
    vector[0] = val
    vector[1] = g_FrameCount
    
    SetVariable(str .. pos, vector)
end

function PrintString(str)
    act(DebugLogOutput, str)
end

function ConvergeValue(target_val, cur_val, max_inc, max_dec)
    local ret = target_val
    
    if target_val == cur_val then
        return ret
    end
    
    local dT = GetDeltaTime()
    local gap = math.abs(target_val - cur_val)
    local add_val = 0
    
    if cur_val < target_val then
        add_val = math.abs(max_inc * dT)
    elseif target_val < cur_val then
        add_val = -1 * math.abs(max_dec * dT)
    end
    
    if add_val < gap then
        ret = cur_val + add_val
        if add_val > 0 then
            if target_val < ret then
                ret = target_val
            end
        elseif ret < target_val then
            ret = target_val
        end
    end
    
    return ret
end

function ForwardLeg()
    local leftLegModelSpace = hkbGetOldBoneModelSpace("L_Toe0")
    local rightLegModelSpace = hkbGetOldBoneModelSpace("R_Toe0")
    local leftForward = leftLegModelSpace:getTranslation()
    local rightForward = rightLegModelSpace:getTranslation()
    
    if rightForward[2] < leftForward[2] then
        SetVariable("IsRightFootForward", 1)
        return 1
    else
        SetVariable("IsRightFootForward", 0)
        return 0
    end
end

function RightArmLocation()
    local rightHandModelSpace = hkbGetOldBoneModelSpace("R_Hand")
    local spineModelSpace = hkbGetOldBoneModelSpace("Spine1")
    local rightHandLocation = rightHandModelSpace:getTranslation()
    local spineLocation = spineModelSpace:getTranslation()
    
    if rightHandLocation[0] < spineLocation[0] then
        return 0
    else
        return 1
    end
end

function Move_onGenerate()
    local speed = 0
    
    if env(GetSpEffectID, 100000) == TRUE then
        speed = 0
    elseif env(GetSpEffectID, 100001) == TRUE then
        speed = 1
    elseif env(GetSpEffectID, 100002) == TRUE then
        speed = 2
    end
    
    local maxoffset = 0.10000000149011612 * speed
    local minoffset = -0.10000000149011612 * speed
    local position = hkbGetBoneModelSpace("RootPos")
    local turnangle = GetVariable("TurnAngle")
    local internaloffset = GetVariable("InternalOffset")
    local target_val = 0
    
    if math.abs(turnangle) <= 2 then
        target_val = 0
    elseif turnangle > 2 then
        target_val = minoffset
    elseif turnangle < -2 then
        target_val = maxoffset
    end
    
    local offset = ConvergeValue(target_val, internaloffset, 0.30000001192092896, 0.30000001192092896)
    local root_pos = position:getTranslation()
    
    root_pos[0] = root_pos[0] + offset
    position:setTranslation(root_pos)
    hkbSetBoneModelSpace("RootPos", position)
    
    SetVariable("MoveTwistAngle", offset * 80)
    SetVariable("InternalOffset", offset)
end

function SlideLoop_onGenerate()
    local slide_angle = GetVariable("SlideAngle")
    local turn_angle = hkbGetVariable("TurnAngle")
    local f8_local0 = nil
    
    if turn_angle < 0 then
        f8_local0 = 0.10000000149011612
    else
        f8_local0 = -0.10000000149011612
    end
    
    local position = hkbGetBoneModelSpace("RootPos")
    local internaloffset = GetVariable("InternalOffset")
    
    if turn_angle > 90 then
        turn_angle = 90
    elseif turn_angle < -90 then
        turn_angle = -90
    end
    
    local offsetx, offsety = nil
    
    if turn_angle - slide_angle < 1 and turn_angle - slide_angle > -1 then
        offsetx = ConvergeValue(0, internaloffset, 0.07999999821186066, 0.07999999821186066)
        offsety = math.abs(offsetx)
    else
        offsetx = ConvergeValue(f8_local0, internaloffset, 0.20000000298023224, 0.20000000298023224)
        offsety = math.abs(offsetx)
    end
    
    local root_pos = position:getTranslation()
    
    root_pos[0] = root_pos[0] + offsetx
    root_pos[1] = root_pos[1] - offsety ^ 0.699999988079071
    position:setTranslation(root_pos)
    
    hkbSetBoneModelSpace("RootPos", position)
    SetVariable("InternalOffset", offsetx)
    SetVariable("MoveTwistAngle", offsetx * 400)
end

function ChangeWaistTwist(max_start_angle, min_start_angle, max_end_angle, min_end_angle)
    local val_start = min_start_angle
    local val_end = min_end_angle
    
    if env(GetSpEffectID, 100001) == TRUE then
        val_start = -max_start_angle * 0.5
        val_end = -max_end_angle * 0.5
    elseif env(GetSpEffectID, 100002) == TRUE then
        val_start = -max_start_angle
        val_end = -max_end_angle
    end
    
    SetVariable("ChangeStartWaistTwistAngle", ConvergeValue(val_start, GetVariable("ChangeStartWaistTwistAngle"), 90, 90))
    SetVariable("ChangeEndWaistTwistAngle", ConvergeValue(val_end, GetVariable("ChangeEndWaistTwistAngle"), 90, 90))
end

function UpdateShoulderTwist()
    local maxshoulderfront = env(UpperArmControlTopAndBottomAngle)
    local maxshoulderside = env(UpperArmControlOuterAngle)
    local weapontwistshoulderfront = GetVariable("WeaponTwistShoulderFront")
    local weapontwistshoulderside = GetVariable("WeaponTwistShoulderSide")
    
    if maxshoulderfront == 0 and maxshoulderside == 0 and weapontwistshoulderfront == 0 and weapontwistshoulderside == 0 then
        SetVariable("IsEnableWeaponTwistFront", false)
        SetVariable("IsEnableWeaponTwistSide", false)
        return
    end
    
    local shoulderfront = 0
    local shoulderside = 0
    
    if 0 < g_TimeActEditor_00 then
        shoulderfront = maxshoulderfront * g_TimeActEditor_00
        shoulderside = maxshoulderside * g_TimeActEditor_00
    elseif 0 < g_TimeActEditor_02 then
        shoulderfront = maxshoulderfront * g_TimeActEditor_02
        shoulderside = maxshoulderside * g_TimeActEditor_02
    end
    
    if shoulderfront == weapontwistshoulderfront and shoulderside == weapontwistshoulderside then
        return
    end
    
    local maxconvergerate = 180
    local convergeratefront = maxconvergerate
    local convergerateside = maxconvergerate
    
    if maxshoulderside < maxshoulderfront and maxshoulderside > 0 then
        convergerateside = maxshoulderside / maxshoulderfront * maxconvergerate
    elseif maxshoulderfront < maxshoulderside and maxshoulderfront > 0 then
        convergeratefront = maxshoulderfront / maxshoulderside * maxconvergerate
    end
    
    local twistshoulderfront = ConvergeValue(shoulderfront, weapontwistshoulderfront, convergeratefront, convergeratefront)
    local twistshoulderside = ConvergeValue(shoulderside, weapontwistshoulderside, convergerateside, convergerateside)
    
    SetVariable("WeaponTwistShoulderFront", twistshoulderfront)
    SetVariable("WeaponTwistShoulderSide", twistshoulderside)
    
    if twistshoulderfront > 0 then
        SetVariable("IsEnableWeaponTwistFront", true)
    else
        SetVariable("IsEnableWeaponTwistFront", false)
    end
    
    if twistshoulderside > 0 then
        SetVariable("IsEnableWeaponTwistSide", true)
    else
        SetVariable("IsEnableWeaponTwistSide", false)
    end
end

function UpdateWristTwist()
    local style = c_Style
    local ref_right_hand = HAND_RIGHT
    local ref_left_hand = HAND_LEFT
    local is_both = FALSE
    
    if style >= HAND_LEFT_BOTH then
        if IsDualBlade() == TRUE then
            if style == HAND_LEFT_BOTH then
                ref_right_hand = HAND_LEFT
            else
                ref_left_hand = HAND_RIGHT
            end
        else
            is_both = TRUE
        end
    end
    
    local kind_right = env(GetEquipWeaponCategory, ref_right_hand)
    
    GetVariable("WristTwistSideR")
    GetVariable("UpperArmTwistFrontR")
    GetVariable("UpperArmTwistSideR")
    
    local cur_angle_right = GetVariable("WristTwistFrontR")
    local result_right = CalcArmTwistAngle(kind_right, cur_angle_right, is_both)
    
    if cur_angle_right[1] == 0 and cur_angle_right[2] == 0 and cur_angle_right[3] == 0 and cur_angle_right[4] == 0 and result_right[1] == 0 and result_right[2] == 0 and result_right[3] == 0 and result_right[4] == 0 then
        SetVariable("IsEnableArmTwistFrontR", false)
        SetVariable("IsEnableArmTwistSideR", false)
    else
        SetVariable("WristTwistFrontR", result_right[1])
        SetVariable("WristTwistSideR", result_right[2])
        SetVariable("UpperArmTwistFrontR", result_right[3])
        SetVariable("UpperArmTwistSideR", result_right[4])
        if result_right[1] ~= 0 or result_right[3] ~= 0 then
            SetVariable("IsEnableArmTwistFrontR", true)
        else
            SetVariable("IsEnableArmTwistFrontR", false)
        end
        if result_right[2] ~= 0 or result_right[4] ~= 0 then
            SetVariable("IsEnableArmTwistSideR", true)
        else
            SetVariable("IsEnableArmTwistSideR", false)
        end
    end
    
    local kind_left = env(GetEquipWeaponCategory, ref_left_hand)
    
    GetVariable("WristTwistSideL")
    GetVariable("UpperArmTwistFrontL")
    GetVariable("UpperArmTwistSideL")
    
    local cur_angle_left = GetVariable("WristTwistFrontL")
    local result_left = CalcArmTwistAngle(kind_left, cur_angle_left, is_both)
    
    if cur_angle_left[1] == 0 and cur_angle_left[2] == 0 and cur_angle_left[3] == 0 and cur_angle_left[4] == 0 and result_left[1] == 0 and result_left[2] == 0 and result_left[3] == 0 and result_left[4] == 0 then
        SetVariable("IsEnableArmTwistFrontL", false)
        SetVariable("IsEnableArmTwistSideL", false)
    else
        SetVariable("WristTwistFrontL", result_left[1])
        SetVariable("WristTwistSideL", result_left[2])
        SetVariable("UpperArmTwistFrontL", result_left[3])
        SetVariable("UpperArmTwistSideL", result_left[4])
        if result_left[1] ~= 0 or result_left[3] ~= 0 then
            SetVariable("IsEnableArmTwistFrontL", true)
        else
            SetVariable("IsEnableArmTwistFrontL", false)
        end
        if result_left[2] ~= 0 or result_left[4] ~= 0 then
            SetVariable("IsEnableArmTwistSideL", true)
        else
            SetVariable("IsEnableArmTwistSideL", false)
        end
    end
end

function CalcArmTwistAngle(kind, cur_angle, is_both)
    local max_angle = {0, 0, 0, 0}
    local result = {0, 0, 0, 0}
    
    if 0 ~= GetVariable("DebugArmTwistWeaponCategory") then
        GetVariable("DebugArmTwistWristFront")
        GetVariable("DebugArmTwistWristSide")
        GetVariable("DebugArmTwistUpperArmFront")
        GetVariable("DebugArmTwistUpperArmSide")
        ArmTwistWeaponCategory[1] = GetVariable("DebugArmTwistWeaponCategory")
    else
        ArmTwistWeaponCategory[1] = {999, 0, 0, 0, 0}
    end
    
    if is_both == FALSE then
        for i = 1, #ArmTwistWeaponCategory, 1 do
            if kind == ArmTwistWeaponCategory[i][1] then
                for j = 1, 4, 1 do
                    max_angle[j] = ArmTwistWeaponCategory[i][j + 1]
                end
            end
        end
    end
    
    for i = 1, 4, 1 do
        if max_angle[i] == 0 then
            if cur_angle[i] ~= 0 then
                break
            elseif i == 4 then
                return result
            end
        else
            local converge_angle = {0, 0, 0, 0}
            
            if 0 < g_TimeActEditor_00 then
                for i = 1, 4, 1 do
                    converge_angle[i] = max_angle[i] * g_TimeActEditor_00
                end
            elseif 0 < g_TimeActEditor_02 then
                for i = 1, 4, 1 do
                    converge_angle[i] = max_angle[i] * g_TimeActEditor_02
                end
            end
            
            if GetVariable("LocomotionState") == PLAYER_STATE_MOVE then
                converge_angle[3] = kind
                converge_angle[4] = kind
            end
            
            for i = 1, 4, 1 do
                if converge_angle[i] ~= cur_angle[i] then
                    break
                elseif i == 4 then
                    return cur_angle
                end
            end
            
            local max_converge_rate = 90
            local base_angle = math.max(math.abs(max_angle[1]), math.abs(max_angle[2]), math.abs(max_angle[3]), math.abs(max_angle[4]))
            
            for k = 1, 4, 1 do
                local converge_rate = max_converge_rate * math.abs(max_angle[k]) / base_angle
                local tmp = ConvergeValue(converge_angle[k], cur_angle[k], converge_rate, converge_rate)
                result[k] = tmp
            end
            
            return result
        end
    end
    
    local converge_angle = {0, 0, 0, 0}
    
    if 0 < g_TimeActEditor_00 then
        for i = 1, 4, 1 do
            converge_angle[i] = max_angle[i] * g_TimeActEditor_00
        end
    elseif 0 < g_TimeActEditor_02 then
        for i = 1, 4, 1 do
            converge_angle[i] = max_angle[i] * g_TimeActEditor_02
        end
    end
    
    if GetVariable("LocomotionState") == PLAYER_STATE_MOVE then
        converge_angle[3] = kind
        converge_angle[4] = kind
    end
    
    for i = 1, 4, 1 do
        if converge_angle[i] ~= cur_angle[i] then
            break
        elseif i == 4 then
            return cur_angle
        end
    end
    
    local max_converge_rate = 90
    local base_angle = math.max(math.abs(max_angle[1]), math.abs(max_angle[2]), math.abs(max_angle[3]), math.abs(max_angle[4]))
    
    for k = 1, 4, 1 do
        local converge_rate = max_converge_rate * math.abs(max_angle[k]) / base_angle
        local tmp = ConvergeValue(converge_angle[k], cur_angle[k], converge_rate, converge_rate)
        result[k] = tmp
    end
    
    return result
end

function UpdateFemaleBlend()
    if c_IsFemale == TRUE then
        if g_TimeActEditor_00 > 0 then
            SetVariable("FemaleBlendRate", ConvergeValue(g_TimeActEditor_00, GetVariable("FemaleBlendRate"), 10, 10))
            return
        elseif 0 < g_TimeActEditor_01 then
            SetVariable("FemaleBlendRate", ConvergeValue(g_TimeActEditor_01, GetVariable("FemaleBlendRate"), 10, 10))
            return
        else
            SetVariable("FemaleBlendRate", ConvergeValue(0, GetVariable("FemaleBlendRate"), 10, 10))
            return
        end
    else
        SetVariable("FemaleBlendRate", 0)
    end
end

function ActivateRightArmAdd(start_type)
    if IsRightArmAddState() == TRUE then
        return
    elseif start_type == START_FRAME_ALL then
        local category = GetBaseCategory()
        
        if category == 1 then
            SetVariable("RightArmAddWeight_a02", 1)
            SetVariable("RightArmAddWeight_a03", 0)
        elseif category == 2 then
            SetVariable("RightArmAddWeight_a02", 0)
            SetVariable("RightArmAddWeight_a03", 1)
        else
            SetVariable("RightArmAddWeight_a02", 0)
            SetVariable("RightArmAddWeight_a03", 0)
        end
    elseif start_type == START_FRAME_A02 then
        local category = GetBaseCategory()
        
        if category == 1 then
            SetVariable("RightArmAddWeight_a02", 1)
        else
            SetVariable("RightArmAddWeight_a02", 0)
        end
        
        SetVariable("RightArmAddWeight_a03", 0)
    else
        SetVariable("RightArmAddWeight_a02", 0)
        SetVariable("RightArmAddWeight_a03", 0)
    end
end

function UpdateRightArmAdd()
    if IsRightArmAddState() == FALSE then
        return
    end
    
    local category = GetBaseCategory()
    
    if category == 1 then
        local layer_weight_a03 = ConvergeValue(0, GetVariable("RightArmAddWeight_a03"), 4, 4)
        
        SetVariable("RightArmAddWeight_a03", layer_weight_a03)
        
        if 0 < g_TimeActEditor_03 then
            local idle_weight_a02 = ConvergeValue(g_TimeActEditor_04, GetVariable("RightArmAddIdle"), 4, 4)
            SetVariable("RightArmAddIdle", idle_weight_a02)
            
            local active_weight_a02 = ConvergeValue(1 - g_TimeActEditor_04, GetVariable("RightArmAddActive"), 4, 4)
            SetVariable("RightArmAddActive", active_weight_a02)
            
            local layer_weight_a02 = g_TimeActEditor_03
            SetVariable("RightArmAddWeight_a02", layer_weight_a02)
            
            return
        else
            local layer_weight_a02 = ConvergeValue(0, GetVariable("RightArmAddWeight_a02"), 4, 4)
            SetVariable("RightArmAddWeight_a02", layer_weight_a02)
            return
        end
    elseif category == 2 then
        local layer_weight_a02 = ConvergeValue(0, GetVariable("RightArmAddWeight_a02"), 4, 4)
        
        SetVariable("RightArmAddWeight_a02", layer_weight_a02)
        if 0 < g_TimeActEditor_05 then
            local idle_weight_a03 = ConvergeValue(g_TimeActEditor_06, GetVariable("RightArmAddIdle"), 4, 4)
            SetVariable("RightArmAddIdle", idle_weight_a03)
            
            local active_weight_a03 = ConvergeValue(1 - g_TimeActEditor_06, GetVariable("RightArmAddActive"), 4, 4)
            SetVariable("RightArmAddActive", active_weight_a03)
            
            local layer_weight_a03 = g_TimeActEditor_05
            SetVariable("RightArmAddWeight_a03", layer_weight_a03)
            
            return
        else
            local layer_weight_a03 = ConvergeValue(0, GetVariable("RightArmAddWeight_a03"), 4, 4)
            SetVariable("RightArmAddWeight_a03", layer_weight_a03)
            
            return
        end
    elseif category == 0 then
        local layer_weight_a02 = ConvergeValue(0, GetVariable("RightArmAddWeight_a02"), 4, 4)
        SetVariable("RightArmAddWeight_a02", layer_weight_a02)
        
        local layer_weight_a03 = ConvergeValue(0, GetVariable("RightArmAddWeight_a03"), 4, 4)
        SetVariable("RightArmAddWeight_a03", layer_weight_a03)
        
    end
end

function IsRightArmAddState()
    local state = GetVariable("MasterActiveState")
    
    if state == 56 then
        return TRUE
    elseif state == 42 then
        local upper_state = GetVariable("UpperDefaultState00")
        if upper_state == GESTURE_DEF0 then
            return TRUE
        elseif upper_state == ITEM_DEF0 then
            return TRUE
        elseif upper_state == ATTACKCROSSBOWLEFT_DEF0 then
            return TRUE
        end
    elseif state == 55 then
        return TRUE
    elseif state == 37 then
        return TRUE
    end
    
    return FALSE
end

function SetTimeActEditorVariable()
    g_TimeActEditor_00 = GetVariable("TimeActEditor_00")
    g_TimeActEditor_01 = GetVariable("TimeActEditor_01")
    g_TimeActEditor_02 = GetVariable("TimeActEditor_02")
    g_TimeActEditor_03 = GetVariable("TimeActEditor_03")
    g_TimeActEditor_04 = GetVariable("TimeActEditor_04")
    g_TimeActEditor_05 = GetVariable("TimeActEditor_05")
    g_TimeActEditor_06 = GetVariable("TimeActEditor_06")
end

function Master_onGenerate()
    if hkbIsNodeActive("SlideLoop_Blend") then
        SlideLoop_onGenerate()
    else
        Move_onGenerate()
    end
end

------------------------
-- Conditions 
-- env( <condition>, <args> )
-- *<args> are optional
------------------------
IsGeneralAnimEnd = 0
IsAttackAnimEnd = 1
AnimIDOffset = 9
AdditiveBlendAnim = 10
AdditiveBlendAnimOfSlot = 11

IsAtkRequest = 100 -- args: <attack request index>
IsAtkReleaseRequest = 101
IsChainAtkRequest = 102
GetAtkDuration = 103
GetWeaponSwitchRequest = 104
GetCommandIDFromEvent = 105
GetAIActionType = 106
GetAIChainActionType = 107
GetChainEvadeRequest = 108
GetWeaponChangeRequest = 109
GetAnimIDFromMoveParam = 110
IsThereAnyAtkRequest = 111
IsThereAnyChainAtkRequest = 112
IsItemUseMenuOpening = 113
IsMagicUseMenuOpening = 114
IsItemUseMenuOpened = 115
IsMagicUseMenuOpened = 116
GetBlendAnimIDFromMoveParam = 117
GetAIChainStepType = 118
GetTransitionToSpecialStayAnimID = 119
GetAIAtkCancelType = 120
GetWeaponCancelType = 121 -- args: <hand index>
IsWeaponCancelPossible = 122 
GetAIDefenseCancelType = 123
GetAIVersusBackstabCancelType = 124

IsFalling = 200
IsLanding = 201
GetReceivedDamageType = 202
IsActiveActionValid = 203
GetActionEventNumber = 204
IsNormalDmgPassThroughDuringThrow = 205
IsThrowing = 206
GetWeaponSwitchState = 207
IsEquipmentSwitchPossible = 209
IsAnimCancelPossibleInAtkRelease = 210
IsEmergencyStopAnimPlaying = 211
GetLockRangeState = 212
GetLockAngleState = 213
IsAnimCancelPossibleInDamageHit = 214
IsChangeToScrapeAtk = 215
IsChangeToDeflectAtk = 216
IsChangeToAfterParrySuccess = 217
IsChangeFromNormalToBigAtk = 218
GetMovementType = 219
IsLargeAtkComboPossible = 220
IsMapActionPossible = 221
GetReceivedDamageDirection = 222
GetMapActionID = 223
GetFallHeight = 224
GetEquipWeaponCategory = 225 -- args: <hand index>
IsHoldingBow = 226
GetMagicAnimType = 227
WasNotLargeAtk = 228
IsBackAtkPossible = 229
IsAfterParryAtkPossible = 230
GetItemAnimType = 231
IsMagicUseable = 232 -- args: <hand index>, <unknown index>
IsItemUseable = 233
IsPrecisionShoot = 234
IsFireDamaged = 235
GetDamageLevel = 236
GetGuardLevelAction = 237
IsNewLeftHandAtkFromStay = 238
IsParryFromIdle = 239
IsGuardFromIdle = 240
IsNewLeftHandAtkFromAtkCancel = 241
IsParryFromAtkCancel = 242
IsGuardFromAtkCancel = 243
IsTiedUp = 244
IsOutOfAmmo = 245 -- args: <slot index> # 1 is left slot, 0 is right slot
IsUseCatLanding = 246
GetHoverMoveState = 247
IsTruelyLanding = 248
IsRightHandMagic = 249
IsChangeToSpecialStayAnim = 250
GetSpecialStayAnimID = 251
AcquireSpecialDamageAnimationID = 252
IsRunTurnAnimPlaying = 253
IsGenerateAction = 254
GetSpecialStayCancelAnimID = 255
HasReceivedAnyDamage = 256
GetMoveAnimParamID = 257
GetGuardLevel = 258
IsRequestTurnAnimStart = 259
IsTurningWithAnim = 260
IsFlying = 261
IsAbilityInsufficient = 262 -- args: <hand index>
GetEquipWeightRatioForFalling = 263
GetFlightMotionState = 264
GetIsWeakPoint = 265
GetMoveAnimBlendRatio = 266
GetLadderActionState = 267
IsInDisguise = 268
IsCoopWait = 269
IsCoop = 270
IsSpecialTransitionPossible = 271
GetLandingAnimBlendRatio = 272
GetThrowAnimID = 273
DidOpponentDieFromThrow = 274
HasThrowEnded = 275
IsThrowSelfDeath = 276
IsThrowSuccess = 277
GetGuardMotionCategory = 278 -- args: <hand index>
IsBeingThrown = 279
IsSelfThrow = 280
IsThrowDeathState = 281
GetNewLockState = 282
IsOnLadder = 283
GetPhysicalAttribute = 284
GetSpecialAttribute = 285
GetSpecialStayDeathAnimID = 286
HasReceivedAnyDamage_AnimEnd = 287
EggGrowth_IsHeadScratch = 288
EggGrowth_IsBecomeEggHead = 289
IsStop = 290
IsSomeoneOnLadder = 291 -- args: <check distance>, <unknown index>
IsSomeoneUnderLadder = 292 -- args: <check distance>, <unknown index>
GetLadderHandState = 293
DoesLadderHaveCharacters = 294 -- args: <check distance>, <unknown index>, <unknown index>
IsLadderRightHandStayState = 295
IsDescendingToFloor = 296
IsInputDirectionMatch = 297
IsSpecialTransition2Possible = 298
IsVersusDivineDamage = 299

IsGeneralAnimCancelPossible = 300
GetEventEzStateFlag = 301 -- args: <EzState command id>
IsLadderEventEnd = 302
IsReachBottomOfLadder = 303
IsReachTopOfLadder = 304
GetStateChangeType = 305 -- args: <state change id>
IsOnLastRungOfLadder = 306
GetWeaponDurability = 311
IsWeaponBroken = 312
IsAnimEndBySkillCancel = 313
EggGrowth_IsBecomeEgghead_SecondStage = 314
IsHamariFallDeath = 315 -- args: <unknown index>
IsClient = 316
IsSlope = 317
IsSwitchState = 318
IsPressUpKey = 319
IsSpecialTurning = 320
GetIntValueForTest = 321
IsObjActInterpolatedMotion = 322
GetObjActTargetDirection = 323
GetObjActRemainingInterpolateTime = 324
IsGap = 325
GetWeaponID = 326 -- args: <hand index>
IsMovingLaterally = 327
IsNet = 328
HasBrokenSA = 329
IsEmergencyQuickTurnActivated = 330
IsDoubleChantPossible = 331
IsAnimOver = 332
ObtainedDT = 333
GetBehaviorID = 334 -- args: <hand index>
IsTwoHandPossible = 335 -- args: <hand index>
IsPartDamageAdditiveBlendInvalid = 336
IsThrowPosRealign = 337
GetBoltLoadingState = 338 -- args: <slot index>
IsAnimEnd = 339 -- args: <unknown index>
IsTwinSwords = 340 -- args: <hand index>
GetTurnAngleForDelayedTurn = 341
GetThrowDefenseCount = 342
IsEmergencyEvasionPossible = 343 -- args: <unknown index>
HasEnoughArtsPoints = 344 -- args: <button index>, <hand index>
GetEquipWeaponSpecialCategoryNumber = 345 -- args: <hand index>
CheckForEventAnimPlaybackRequest = 346
IsFemale = 347
GetDelayTurnAngleDifference = 348
IsDamageMotionOff = 349
HasReachedStatsNeededForWeapon = 350 -- args: <hand index>  -- Checks for the attainmentWepStatus fields in EquipParamWeapon
UpperArmControlOuterAngle = 351
UpperArmControlTopAndBottomAngle = 352
CompleteLadderSlideDown = 353
GetLadderRungCount = 354
GetNumberOfRungsBelowOnLadder = 355
GetBowAndArrowSlot = 356
GetWeaponStorageSpotType = 357 -- args: <hand index>
GetStayAnimCategory = 358
GetWeaponSwitchStatus = 359
IsEquipmentMenuOpen = 360
GetRemainingArrowCount = 361

GetHP = 1000
GetStamina = 1001
IsGhost = 1002
GetRandomInt = 1003
GetRandomFloat = 1004
IsUnableToDie = 1005
IsResurrectionPossible = 1006
IsCOMPlayer = 1007
GetAITargetAwareState = 1008
IsAIChangeToAwareState = 1009
GetAITargetAwareStatePreviousFrame = 1010

GetTestDamageAnimID = 1100
IsInvincibleDebugMode = 1101
WasGameLaunchedInPGTestMode = 1102
IsTiltingStick = 1103
GetGestureRequestNumber = 1104
IsStayState = 1105
ActionRequest = 1106 -- args: <action arm index>
ActionCancelRequest = 1107 -- args: <action arm index>
ActionDuration = 1108 -- args: <action arm index>
HasActionRequest = 1109
MovementRequest = 1110
MovementRequestDuration = 1111
HasThrowRequest = 1112
IsGuardCancelPossible = 1113
DoesAnimExist = 1114 -- args: <anim id>, *<anim id>
GetAIMovementType = 1115
GetSpEffectID = 1116
IsConversationEnd = 1117
IsLocked = 1118
GetAtkDirection = 1119
GetPartGroup = 1120
GetKnockbackDistance = 1121

IsMoveCancelPossible = 2000
GetSpecialMovementType = 2002
GetGeneralTAEFlag = 2003 -- args: <flag>
IsSwingHitTarget = 2004
GetCeremonyState = 2005
GetSuccessiveGuardCount = 2006
GetMinLuck = 2007
GetAccumulatedLuck = 2008
GetMaxLuck = 2009
GetMaxStamina = 2010
GetGeneralMSBParameter = 2011
IsHitWall = 2012
GetSafetyDirection = 2013
IsInCeremony = 2014
IsDoingCorpseCarryKeyframe = 2015
GetFP = 2016
IsCeremonyComplete = 2017
IsCeremonyInterrupt = 2018

GetSwordArtsCancelType = "剣戟キャンセルタイプを取得"
IsWoman = "女性か"
IsAnimationOver = "アニメ終了か"
GetAmmunitionSlot = "弓矢スロット取得"
GetWeaponAbilityReleaseStatus = "武器能力開放ステータス値到達か"
CanCancelSwordArtsStance = "剣戟キャンセル可能か"
IsCultCeremonyInterrupted = "儀式中断か"
IsCultCeremonyComplete = "儀式完了か"

------------------------
-- Commands
-- act( <command>, <args> )
-- *<args> are optional
------------------------
ChangeGeneralAnim = 0
ChangeUpperBodyAnim = 1
ChangeStayAnim = 2
ChangeGeneralAnimCategorized = 3 -- args: <anim category>, <anim id>, <layer index>, <blend>, <isLoop>
ChangeUpperBodyAnimCategorized = 4
ChangeGeneralAnimAdditiveCategorized = 5
ChangeUpperBodyAnimAdditiveCategorized = 6
ChangeGeneralAnimCategorizedMatchPlaybackTime = 7
ChangeUpperBodyAnimCategorizedMatchPlaybackTime = 8
SetAnimIDOffset = 9
SetAdditiveBlendAnimation = 10
SetAdditiveBlendAnimationSlotted = 11
ChangeBlendAnimationCategorized = 12
ChangeUpperAndLowerBodySyncedAnimCategorized = 13

SetActiveActionState = 100
SwitchMotion = 101 -- args: <bool> 
SetAllowedThrowAttackType = 102 -- args: <index> # ENUM: THROW_STATE
SetAllowedThrowDefenseType = 103 -- args: <index> # ENUM: THROW_STATE
SwitchEquippedWeapon = 104 -- args: <slot index>
SetReadyForAtkFinish = 105
SetEquipmentChangeable = 106
SetUnableToFall = 107
SendMessageIDToEvents = 108 -- args: <event call>
SetAttackType = 109 -- args: <index> # -1
SetStaminaRecoveryDisabled = 110
SetAIBusyDoingAction = 111
BowTurn = 112
SetBowStance = 113
SetPreciseAimMode = 114
SetSpecialMovement = 115
SetIsWeaponChanging = 116
SetIsItemInUse = 117 -- args: <bool>
SetIsMagicInUse = 118 -- args: <bool>
SetHoverState = 119
RemoveBinoculars = 120
ChangeToSpecialStay = 121
SetIsHeadTurnPossible = 122
OpenMenuWhenUsingItem = 123
OpenMenuWhenUsingMagic = 124 -- args: <action arm index>
BlowDamageTurn = 125
SetDeathStay = 126 -- args: <bool> # TRUE, FALSE
CloseMenuWhenUsingItem = 127
CloseMenuWhenUsingMagic = 128
DisallowAdditiveTurning = 129 -- args: <bool>
ChangeFlightStatus = 130
ShowFixedYAxisDirectionDisplay = 131
WhiffPossibility = 132
SetLadderActionState = 133 -- args: <index>
SetInsufficientStrengthAnimID = 134
ForceCancelThrowAnim = 135
SetThrowState = 136 -- args: <index> # ENUM: THROW_TYPE
StartSlidingDownLadder = 137
SetIsEventActionPossible = 138 -- args: <bool>
RequestThrowAnimInterrupt = 139
SetHandStateOfLadder = 140
SetDamageAnimType = 141 -- args: <index> # ENUM: DAMAGE_FLAG
DownwardSlideTurn = 142 -- args: <index>
InterruptAttack = 143
SkyDeathWarp = 144
ClearSlopeInfo = 145
ReceiveStateInput = 146
SetIsEquipmentChangeableFromMenu = 147
SetHavokVariable = 148 -- args: <string>, <value>
AimAtSelfPosition = 149
SetIsItemAnimationPlaying = 150
DoAIReplanningAtCancelTiming = 151
DenyEventAnimPlaybackRequest = 152
InvokeBackstab = 153
WeaponParameterReference = 154 -- args: <hand index>
AINotifyAttackType = 155 -- args: <index>
SetAutoCaptureTarget = 156
ClearAutoCaptureTarget = 157
RequestAIReplanning = 158
TurnTowardAttacker = 159
SetThrowPossibilityState_Attacker = 160 -- args: <index>
SetThrowPossibilityState_Defender = 161 -- args: <index>
MarkOfGreedyPersonSlipDamageDisable = 162

StateIdentifier = 200

ChangeHP = 1000 -- args: <value>
ChangeStamina = 1001 -- args: <value> # ENUM: STAMINA_REDUCE

SyncAtInit_Active = 1100
SyncAtInit_Passive = 1101

SetMovementScaleMult = 2001 -- args: <value>
AddSpEffect = 2002 -- args: <id>
SetFastStealthThrowEnabled = 2003
SetTurnSpeed = 2004 -- args: <degrees>
SetCeremonyState = 2005
SetDamageMotionBlendRatio = 2006 -- args: <value>
SetForceTurnTarget = 2007
ForceTurn = 2008
SpecialTurn = 2009
SetInSpecialGuard = 2010
SetWeaponCancelType = 2011 -- args: <index>
SetIsPreciseShootingPossible = 2012
ChooseBowAndArrowSlot = 2013 -- args: <slot index> # 0, 1
Set4DirectionMovementThreshold = 2014 -- args: <front right angle>, <front left angle>, <back left angle>, <back right angle> #
LockonSystemUnableToTurnAngle = 2015 -- args: <angle>, <angle>
ReserveArtsPointsUse = 2016 -- args: <button index>, <hand index>
SetArtsPointFEDisplayState = 2017 -- args: <value> # 0, 1
LockonFixedAngleCancel = 2018
TurnToLockonTargetImmediately = 2019 -- args: *<value>
SetSpecialInterpolation = 2020 -- args: <value>, <bool>
LadderSlideDownCancel = 2021
DisableMagicIDSwitching = 2022
DisableToolIDSwitching = 2023
UseItemDecision = 2024

DebugLogOutput = 9000
Test_SpEffectDelete = 9001
Test_SpEffectTypeSpecifyDelete = 9002
MarkerStart = 9003
MarkerEnd = 9004

Wait = 9100
ResetInputQueue = 9101
SetIsEventAnim = 9102
SetAIAttackState = 9103 -- args: <index>
SetIsTurnAnimInProgress = 9104
SetTurnAnimCorrectionRate = 9105 -- args: <degrees>

-- Japanese Strings
ClearAutoLockOnTarget = "自動捕捉対象クリア"
AutoLockOnTargetSetting = "自動捕捉対象設定"
PrecisionShootPossible = "精密射撃可能か"
AIReplanRequest = "AIへのリプランニング要求"
BonfireReset = "貪欲者の印スリップダメージ無効"

------------------------------------------
-- Must be last for the global variables to be read
------------------------------------------

global = {["__index"] = function (table, element)
    return dummy
end}

function dummy()
end

setmetatable(_G, global)
